// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public static partial class VectorClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::VectorGraphQL.State.VectorClientStoreAccessor> AddVectorClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::VectorGraphQL.State.VectorClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddJobMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonBasicMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonWithPositionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.DeactivatePersonMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPositionMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetFirst100ActivePeopleAndProgressQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetAllLocationsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPersonAndProgressByCSUIDQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPositionByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.UpdatePersonMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPersonByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetCourseByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetAllPositionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetFirst100PeopleQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.VectorClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IVectorClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::VectorGraphQL.State.VectorClientStoreAccessor>("VectorClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("VectorClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddJobResult>, global::VectorGraphQL.State.AddJobResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddJobResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IAddJobMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddJobResult>, global::VectorGraphQL.State.AddJobBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IAddJobResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddJobResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddJobResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.AddJobMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IAddJobMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddJobMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonBasicResult>, global::VectorGraphQL.State.AddPersonBasicResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonBasicResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IAddPersonBasicMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonBasicResult>, global::VectorGraphQL.State.AddPersonBasicBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IAddPersonBasicResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonBasicResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonBasicResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.AddPersonBasicMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IAddPersonBasicMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonBasicMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonWithPositionResult>, global::VectorGraphQL.State.AddPersonWithPositionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonWithPositionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IAddPersonWithPositionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonWithPositionResult>, global::VectorGraphQL.State.AddPersonWithPositionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IAddPersonWithPositionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonWithPositionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonWithPositionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.AddPersonWithPositionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IAddPersonWithPositionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonWithPositionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IDeactivatePersonResult>, global::VectorGraphQL.State.DeactivatePersonResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IDeactivatePersonResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IDeactivatePersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IDeactivatePersonResult>, global::VectorGraphQL.State.DeactivatePersonBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IDeactivatePersonResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IDeactivatePersonResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IDeactivatePersonResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.DeactivatePersonMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IDeactivatePersonMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.DeactivatePersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPositionResult>, global::VectorGraphQL.State.AddPositionResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPositionResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IAddPositionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPositionResult>, global::VectorGraphQL.State.AddPositionBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IAddPositionResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPositionResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPositionResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.AddPositionMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IAddPositionMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPositionMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>, global::VectorGraphQL.State.GetFirst100ActivePeopleAndProgressResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>, global::VectorGraphQL.State.GetFirst100ActivePeopleAndProgressBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetFirst100ActivePeopleAndProgressQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetFirst100ActivePeopleAndProgressQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllLocationsResult>, global::VectorGraphQL.State.GetAllLocationsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllLocationsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetAllLocationsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllLocationsResult>, global::VectorGraphQL.State.GetAllLocationsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetAllLocationsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllLocationsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllLocationsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetAllLocationsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetAllLocationsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetAllLocationsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>, global::VectorGraphQL.State.GetPersonAndProgressByCSUIDResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>, global::VectorGraphQL.State.GetPersonAndProgressByCSUIDBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetPersonAndProgressByCSUIDQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPersonAndProgressByCSUIDQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPositionByIdResult>, global::VectorGraphQL.State.GetPositionByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPositionByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetPositionByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPositionByIdResult>, global::VectorGraphQL.State.GetPositionByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetPositionByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPositionByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPositionByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetPositionByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetPositionByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPositionByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IUpdatePersonResult>, global::VectorGraphQL.State.UpdatePersonResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IUpdatePersonResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IUpdatePersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IUpdatePersonResult>, global::VectorGraphQL.State.UpdatePersonBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IUpdatePersonResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IUpdatePersonResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IUpdatePersonResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.UpdatePersonMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IUpdatePersonMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.UpdatePersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonByIdResult>, global::VectorGraphQL.State.GetPersonByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetPersonByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonByIdResult>, global::VectorGraphQL.State.GetPersonByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetPersonByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetPersonByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetPersonByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetPersonByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetCourseByIdResult>, global::VectorGraphQL.State.GetCourseByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetCourseByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetCourseByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetCourseByIdResult>, global::VectorGraphQL.State.GetCourseByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetCourseByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetCourseByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetCourseByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetCourseByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetCourseByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetCourseByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllPositionsResult>, global::VectorGraphQL.State.GetAllPositionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllPositionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetAllPositionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllPositionsResult>, global::VectorGraphQL.State.GetAllPositionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetAllPositionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllPositionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllPositionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetAllPositionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetAllPositionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetAllPositionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonResult>, global::VectorGraphQL.State.AddPersonResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IAddPersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonResult>, global::VectorGraphQL.State.AddPersonBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IAddPersonResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.AddPersonMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IAddPersonMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.AddPersonMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100PeopleResult>, global::VectorGraphQL.State.GetFirst100PeopleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100PeopleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.IGetFirst100PeopleQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100PeopleResult>, global::VectorGraphQL.State.GetFirst100PeopleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::VectorGraphQL.IGetFirst100PeopleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100PeopleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100PeopleResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.GetFirst100PeopleQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IGetFirst100PeopleQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.GetFirst100PeopleQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::VectorGraphQL.State.VectorClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.VectorClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::VectorGraphQL.IVectorClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::VectorGraphQL.VectorClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace VectorGraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobResult : global::System.IEquatable<AddJobResult>, IAddJobResult
    {
        public AddJobResult(global::VectorGraphQL.IAddJob_Person? person)
        {
            Person = person;
        }

        public global::VectorGraphQL.IAddJob_Person? Person { get; }

        public virtual global::System.Boolean Equals(AddJobResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddJobResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJob_Person_PersonMutation : global::System.IEquatable<AddJob_Person_PersonMutation>, IAddJob_Person_PersonMutation
    {
        public AddJob_Person_PersonMutation(global::VectorGraphQL.IAddJob_Person_AddJob? addJob)
        {
            AddJob = addJob;
        }

        public global::VectorGraphQL.IAddJob_Person_AddJob? AddJob { get; }

        public virtual global::System.Boolean Equals(AddJob_Person_PersonMutation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddJob is null && other.AddJob is null) || AddJob != null && AddJob.Equals(other.AddJob)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddJob_Person_PersonMutation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddJob != null)
                {
                    hash ^= 397 * AddJob.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJob_Person_AddJob_Job : global::System.IEquatable<AddJob_Person_AddJob_Job>, IAddJob_Person_AddJob_Job
    {
        public AddJob_Person_AddJob_Job(global::System.String jobId, global::System.String? title)
        {
            JobId = jobId;
            Title = title;
        }

        public global::System.String JobId { get; }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(AddJob_Person_AddJob_Job? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (JobId.Equals(other.JobId)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddJob_Person_AddJob_Job)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * JobId.GetHashCode();
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJobResult
    {
        public global::VectorGraphQL.IAddJob_Person? Person { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJob_Person
    {
        public global::VectorGraphQL.IAddJob_Person_AddJob? AddJob { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJob_Person_PersonMutation : IAddJob_Person
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJob_Person_AddJob
    {
        public global::System.String JobId { get; }

        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJob_Person_AddJob_Job : IAddJob_Person_AddJob
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicResult : global::System.IEquatable<AddPersonBasicResult>, IAddPersonBasicResult
    {
        public AddPersonBasicResult(global::VectorGraphQL.IAddPersonBasic_AddPerson? addPerson)
        {
            AddPerson = addPerson;
        }

        public global::VectorGraphQL.IAddPersonBasic_AddPerson? AddPerson { get; }

        public virtual global::System.Boolean Equals(AddPersonBasicResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddPerson is null && other.AddPerson is null) || AddPerson != null && AddPerson.Equals(other.AddPerson)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPersonBasicResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddPerson != null)
                {
                    hash ^= 397 * AddPerson.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasic_AddPerson_Person : global::System.IEquatable<AddPersonBasic_AddPerson_Person>, IAddPersonBasic_AddPerson_Person
    {
        public AddPersonBasic_AddPerson_Person(global::System.String personId, global::System.String? first, global::System.String? last, global::System.String? username)
        {
            PersonId = personId;
            First = first;
            Last = last;
            Username = username;
        }

        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }

        public virtual global::System.Boolean Equals(AddPersonBasic_AddPerson_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PersonId.Equals(other.PersonId)) && ((First is null && other.First is null) || First != null && First.Equals(other.First)) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPersonBasic_AddPerson_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PersonId.GetHashCode();
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonBasicResult
    {
        public global::VectorGraphQL.IAddPersonBasic_AddPerson? AddPerson { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonBasic_AddPerson
    {
        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonBasic_AddPerson_Person : IAddPersonBasic_AddPerson
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionResult : global::System.IEquatable<AddPersonWithPositionResult>, IAddPersonWithPositionResult
    {
        public AddPersonWithPositionResult(global::VectorGraphQL.IAddPersonWithPosition_AddPerson? addPerson)
        {
            AddPerson = addPerson;
        }

        public global::VectorGraphQL.IAddPersonWithPosition_AddPerson? AddPerson { get; }

        public virtual global::System.Boolean Equals(AddPersonWithPositionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddPerson is null && other.AddPerson is null) || AddPerson != null && AddPerson.Equals(other.AddPerson)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPersonWithPositionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddPerson != null)
                {
                    hash ^= 397 * AddPerson.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPosition_AddPerson_Person : global::System.IEquatable<AddPersonWithPosition_AddPerson_Person>, IAddPersonWithPosition_AddPerson_Person
    {
        public AddPersonWithPosition_AddPerson_Person(global::System.String personId, global::System.String? first, global::System.String? last, global::System.String? username)
        {
            PersonId = personId;
            First = first;
            Last = last;
            Username = username;
        }

        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }

        public virtual global::System.Boolean Equals(AddPersonWithPosition_AddPerson_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PersonId.Equals(other.PersonId)) && ((First is null && other.First is null) || First != null && First.Equals(other.First)) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPersonWithPosition_AddPerson_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PersonId.GetHashCode();
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonWithPositionResult
    {
        public global::VectorGraphQL.IAddPersonWithPosition_AddPerson? AddPerson { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonWithPosition_AddPerson
    {
        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonWithPosition_AddPerson_Person : IAddPersonWithPosition_AddPerson
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonResult : global::System.IEquatable<DeactivatePersonResult>, IDeactivatePersonResult
    {
        public DeactivatePersonResult(global::VectorGraphQL.IDeactivatePerson_Person? person)
        {
            Person = person;
        }

        public global::VectorGraphQL.IDeactivatePerson_Person? Person { get; }

        public virtual global::System.Boolean Equals(DeactivatePersonResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeactivatePersonResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePerson_Person_PersonMutation : global::System.IEquatable<DeactivatePerson_Person_PersonMutation>, IDeactivatePerson_Person_PersonMutation
    {
        public DeactivatePerson_Person_PersonMutation(global::VectorGraphQL.IDeactivatePerson_Person_Deactivate? deactivate)
        {
            Deactivate = deactivate;
        }

        public global::VectorGraphQL.IDeactivatePerson_Person_Deactivate? Deactivate { get; }

        public virtual global::System.Boolean Equals(DeactivatePerson_Person_PersonMutation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Deactivate is null && other.Deactivate is null) || Deactivate != null && Deactivate.Equals(other.Deactivate)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeactivatePerson_Person_PersonMutation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Deactivate != null)
                {
                    hash ^= 397 * Deactivate.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePerson_Person_Deactivate_Person : global::System.IEquatable<DeactivatePerson_Person_Deactivate_Person>, IDeactivatePerson_Person_Deactivate_Person
    {
        public DeactivatePerson_Person_Deactivate_Person(global::System.String personId)
        {
            PersonId = personId;
        }

        public global::System.String PersonId { get; }

        public virtual global::System.Boolean Equals(DeactivatePerson_Person_Deactivate_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PersonId.Equals(other.PersonId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeactivatePerson_Person_Deactivate_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PersonId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePersonResult
    {
        public global::VectorGraphQL.IDeactivatePerson_Person? Person { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePerson_Person
    {
        public global::VectorGraphQL.IDeactivatePerson_Person_Deactivate? Deactivate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePerson_Person_PersonMutation : IDeactivatePerson_Person
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePerson_Person_Deactivate
    {
        public global::System.String PersonId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePerson_Person_Deactivate_Person : IDeactivatePerson_Person_Deactivate
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionResult : global::System.IEquatable<AddPositionResult>, IAddPositionResult
    {
        public AddPositionResult(global::VectorGraphQL.IAddPosition_AddPosition? addPosition)
        {
            AddPosition = addPosition;
        }

        public global::VectorGraphQL.IAddPosition_AddPosition? AddPosition { get; }

        public virtual global::System.Boolean Equals(AddPositionResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddPosition is null && other.AddPosition is null) || AddPosition != null && AddPosition.Equals(other.AddPosition)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPositionResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddPosition != null)
                {
                    hash ^= 397 * AddPosition.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPosition_AddPosition_Position : global::System.IEquatable<AddPosition_AddPosition_Position>, IAddPosition_AddPosition_Position
    {
        public AddPosition_AddPosition_Position(global::System.String positionId, global::System.String? name)
        {
            PositionId = positionId;
            Name = name;
        }

        public global::System.String PositionId { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(AddPosition_AddPosition_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PositionId.Equals(other.PositionId)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPosition_AddPosition_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PositionId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPositionResult
    {
        public global::VectorGraphQL.IAddPosition_AddPosition? AddPosition { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPosition_AddPosition
    {
        public global::System.String PositionId { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPosition_AddPosition_Position : IAddPosition_AddPosition
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressResult : global::System.IEquatable<GetFirst100ActivePeopleAndProgressResult>, IGetFirst100ActivePeopleAndProgressResult
    {
        public GetFirst100ActivePeopleAndProgressResult(global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People? people)
        {
            People = people;
        }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People? People { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgressResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((People is null && other.People is null) || People != null && People.Equals(other.People)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgressResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (People != null)
                {
                    hash ^= 397 * People.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_PagedPerson : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_PagedPerson>, IGetFirst100ActivePeopleAndProgress_People_PagedPerson
    {
        public GetFirst100ActivePeopleAndProgress_People_PagedPerson(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes?>? nodes, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Pageinfo? pageinfo)
        {
            Nodes = nodes;
            Pageinfo = pageinfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Pageinfo? Pageinfo { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_PagedPerson? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && ((Pageinfo is null && other.Pageinfo is null) || Pageinfo != null && Pageinfo.Equals(other.Pageinfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_PagedPerson)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                if (Pageinfo != null)
                {
                    hash ^= 397 * Pageinfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Person : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Person>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Person
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Person(global::System.String? first, global::System.String? last, global::System.String personId, global::System.String? username, global::System.String? externalUniqueId, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress?>? progress, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs?>? jobs)
        {
            First = first;
            Last = last;
            PersonId = personId;
            Username = username;
            ExternalUniqueId = externalUniqueId;
            Progress = progress;
            Jobs = jobs;
        }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress?>? Progress { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs?>? Jobs { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((First is null && other.First is null) || First != null && First.Equals(other.First))) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && PersonId.Equals(other.PersonId) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((ExternalUniqueId is null && other.ExternalUniqueId is null) || ExternalUniqueId != null && ExternalUniqueId.Equals(other.ExternalUniqueId)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Progress, other.Progress) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Jobs, other.Jobs);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                hash ^= 397 * PersonId.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (ExternalUniqueId != null)
                {
                    hash ^= 397 * ExternalUniqueId.GetHashCode();
                }

                if (Progress != null)
                {
                    foreach (var Progress_elm in Progress)
                    {
                        if (Progress_elm != null)
                        {
                            hash ^= 397 * Progress_elm.GetHashCode();
                        }
                    }
                }

                if (Jobs != null)
                {
                    foreach (var Jobs_elm in Jobs)
                    {
                        if (Jobs_elm != null)
                        {
                            hash ^= 397 * Jobs_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo>, IGetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo
    {
        public GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo(global::System.Int32? count, global::System.Int32? totalCount, global::System.String? startCursor, global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            Count = count;
            TotalCount = totalCount;
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Count == other.Count) && TotalCount == other.TotalCount && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor)) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Count != null)
                {
                    hash ^= 397 * Count.GetHashCode();
                }

                if (TotalCount != null)
                {
                    hash ^= 397 * TotalCount.GetHashCode();
                }

                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress(global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo courseInfo, global::System.Boolean? completed, global::System.DateTimeOffset? completeTime, global::System.String progressId, global::System.Double? maxQuizScore)
        {
            CourseInfo = courseInfo;
            Completed = completed;
            CompleteTime = completeTime;
            ProgressId = progressId;
            MaxQuizScore = maxQuizScore;
        }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo CourseInfo { get; }

        public global::System.Boolean? Completed { get; }

        public global::System.DateTimeOffset? CompleteTime { get; }

        public global::System.String ProgressId { get; }

        public global::System.Double? MaxQuizScore { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseInfo.Equals(other.CourseInfo)) && Completed == other.Completed && ((CompleteTime is null && other.CompleteTime is null) || CompleteTime != null && CompleteTime.Equals(other.CompleteTime)) && ProgressId.Equals(other.ProgressId) && MaxQuizScore == other.MaxQuizScore;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseInfo.GetHashCode();
                if (Completed != null)
                {
                    hash ^= 397 * Completed.GetHashCode();
                }

                if (CompleteTime != null)
                {
                    hash ^= 397 * CompleteTime.GetHashCode();
                }

                hash ^= 397 * ProgressId.GetHashCode();
                if (MaxQuizScore != null)
                {
                    hash ^= 397 * MaxQuizScore.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job(global::System.String jobId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::System.String? title, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location location, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position position)
        {
            JobId = jobId;
            BeginDate = beginDate;
            EndDate = endDate;
            Title = title;
            Location = location;
            Position = position;
        }

        public global::System.String JobId { get; }

        public global::System.DateTime? BeginDate { get; }

        public global::System.DateTime? EndDate { get; }

        public global::System.String? Title { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location Location { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position Position { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (JobId.Equals(other.JobId)) && ((BeginDate is null && other.BeginDate is null) || BeginDate != null && BeginDate.Equals(other.BeginDate)) && ((EndDate is null && other.EndDate is null) || EndDate != null && EndDate.Equals(other.EndDate)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && Location.Equals(other.Location) && Position.Equals(other.Position);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * JobId.GetHashCode();
                if (BeginDate != null)
                {
                    hash ^= 397 * BeginDate.GetHashCode();
                }

                if (EndDate != null)
                {
                    hash ^= 397 * EndDate.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                hash ^= 397 * Location.GetHashCode();
                hash ^= 397 * Position.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo(global::System.String? title, global::System.String courseInfoId)
        {
            Title = title;
            CourseInfoId = courseInfoId;
        }

        public global::System.String? Title { get; }

        public global::System.String CourseInfoId { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && CourseInfoId.Equals(other.CourseInfoId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                hash ^= 397 * CourseInfoId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position : global::System.IEquatable<GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position>, IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position
    {
        public GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgressResult
    {
        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People? People { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People
    {
        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Pageinfo? Pageinfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_PagedPerson : IGetFirst100ActivePeopleAndProgress_People
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes
    {
        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress?>? Progress { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs?>? Jobs { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Person : IGetFirst100ActivePeopleAndProgress_People_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Pageinfo
    {
        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo : IGetFirst100ActivePeopleAndProgress_People_Pageinfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress
    {
        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo CourseInfo { get; }

        public global::System.Boolean? Completed { get; }

        public global::System.DateTimeOffset? CompleteTime { get; }

        public global::System.String ProgressId { get; }

        public global::System.Double? MaxQuizScore { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress : IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs
    {
        public global::System.String JobId { get; }

        public global::System.DateTime? BeginDate { get; }

        public global::System.DateTime? EndDate { get; }

        public global::System.String? Title { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location Location { get; }

        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job : IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo
    {
        public global::System.String? Title { get; }

        public global::System.String CourseInfoId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo : IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location : IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position : IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsResult : global::System.IEquatable<GetAllLocationsResult>, IGetAllLocationsResult
    {
        public GetAllLocationsResult(global::VectorGraphQL.IGetAllLocations_Locations? locations)
        {
            Locations = locations;
        }

        public global::VectorGraphQL.IGetAllLocations_Locations? Locations { get; }

        public virtual global::System.Boolean Equals(GetAllLocationsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Locations is null && other.Locations is null) || Locations != null && Locations.Equals(other.Locations)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllLocationsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Locations != null)
                {
                    hash ^= 397 * Locations.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocations_Locations_PagedLocation : global::System.IEquatable<GetAllLocations_Locations_PagedLocation>, IGetAllLocations_Locations_PagedLocation
    {
        public GetAllLocations_Locations_PagedLocation(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes?>? nodes, global::VectorGraphQL.IGetAllLocations_Locations_PageInfo? pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetAllLocations_Locations_PageInfo? PageInfo { get; }

        public virtual global::System.Boolean Equals(GetAllLocations_Locations_PagedLocation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && ((PageInfo is null && other.PageInfo is null) || PageInfo != null && PageInfo.Equals(other.PageInfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllLocations_Locations_PagedLocation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                if (PageInfo != null)
                {
                    hash ^= 397 * PageInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocations_Locations_Nodes_Location : global::System.IEquatable<GetAllLocations_Locations_Nodes_Location>, IGetAllLocations_Locations_Nodes_Location
    {
        public GetAllLocations_Locations_Nodes_Location(global::System.String locationId, global::System.String? name, global::System.String? code, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children?>? children)
        {
            LocationId = locationId;
            Name = name;
            Code = code;
            Children = children;
        }

        public global::System.String LocationId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children?>? Children { get; }

        public virtual global::System.Boolean Equals(GetAllLocations_Locations_Nodes_Location? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LocationId.Equals(other.LocationId)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Children, other.Children);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllLocations_Locations_Nodes_Location)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LocationId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Children != null)
                {
                    foreach (var Children_elm in Children)
                    {
                        if (Children_elm != null)
                        {
                            hash ^= 397 * Children_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocations_Locations_PageInfo_PageInfo : global::System.IEquatable<GetAllLocations_Locations_PageInfo_PageInfo>, IGetAllLocations_Locations_PageInfo_PageInfo
    {
        public GetAllLocations_Locations_PageInfo_PageInfo(global::System.Int32? count, global::System.Int32? totalCount, global::System.String? startCursor, global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            Count = count;
            TotalCount = totalCount;
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(GetAllLocations_Locations_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Count == other.Count) && TotalCount == other.TotalCount && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor)) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllLocations_Locations_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Count != null)
                {
                    hash ^= 397 * Count.GetHashCode();
                }

                if (TotalCount != null)
                {
                    hash ^= 397 * TotalCount.GetHashCode();
                }

                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocations_Locations_Nodes_Children_Location : global::System.IEquatable<GetAllLocations_Locations_Nodes_Children_Location>, IGetAllLocations_Locations_Nodes_Children_Location
    {
        public GetAllLocations_Locations_Nodes_Children_Location(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetAllLocations_Locations_Nodes_Children_Location? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllLocations_Locations_Nodes_Children_Location)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocationsResult
    {
        public global::VectorGraphQL.IGetAllLocations_Locations? Locations { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations
    {
        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetAllLocations_Locations_PageInfo? PageInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_PagedLocation : IGetAllLocations_Locations
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_Nodes
    {
        public global::System.String LocationId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children?>? Children { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_Nodes_Location : IGetAllLocations_Locations_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_PageInfo
    {
        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_PageInfo_PageInfo : IGetAllLocations_Locations_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_Nodes_Children
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocations_Locations_Nodes_Children_Location : IGetAllLocations_Locations_Nodes_Children
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDResult : global::System.IEquatable<GetPersonAndProgressByCSUIDResult>, IGetPersonAndProgressByCSUIDResult
    {
        public GetPersonAndProgressByCSUIDResult(global::VectorGraphQL.IGetPersonAndProgressByCSUID_People? people)
        {
            People = people;
        }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People? People { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUIDResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((People is null && other.People is null) || People != null && People.Equals(other.People)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUIDResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (People != null)
                {
                    hash ^= 397 * People.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_PagedPerson : global::System.IEquatable<GetPersonAndProgressByCSUID_People_PagedPerson>, IGetPersonAndProgressByCSUID_People_PagedPerson
    {
        public GetPersonAndProgressByCSUID_People_PagedPerson(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_PagedPerson? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_PagedPerson)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Person : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Person>, IGetPersonAndProgressByCSUID_People_Nodes_Person
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Person(global::System.String? first, global::System.String? last, global::System.String personId, global::System.String? username, global::System.String? externalUniqueId, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress?>? progress, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs?>? jobs)
        {
            First = first;
            Last = last;
            PersonId = personId;
            Username = username;
            ExternalUniqueId = externalUniqueId;
            Progress = progress;
            Jobs = jobs;
        }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress?>? Progress { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs?>? Jobs { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((First is null && other.First is null) || First != null && First.Equals(other.First))) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && PersonId.Equals(other.PersonId) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((ExternalUniqueId is null && other.ExternalUniqueId is null) || ExternalUniqueId != null && ExternalUniqueId.Equals(other.ExternalUniqueId)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Progress, other.Progress) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Jobs, other.Jobs);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                hash ^= 397 * PersonId.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (ExternalUniqueId != null)
                {
                    hash ^= 397 * ExternalUniqueId.GetHashCode();
                }

                if (Progress != null)
                {
                    foreach (var Progress_elm in Progress)
                    {
                        if (Progress_elm != null)
                        {
                            hash ^= 397 * Progress_elm.GetHashCode();
                        }
                    }
                }

                if (Jobs != null)
                {
                    foreach (var Jobs_elm in Jobs)
                    {
                        if (Jobs_elm != null)
                        {
                            hash ^= 397 * Jobs_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress>, IGetPersonAndProgressByCSUID_People_Nodes_Progress_Progress
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress(global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo courseInfo, global::System.Boolean? completed, global::System.DateTimeOffset? completeTime, global::System.String progressId, global::System.Double? maxQuizScore)
        {
            CourseInfo = courseInfo;
            Completed = completed;
            CompleteTime = completeTime;
            ProgressId = progressId;
            MaxQuizScore = maxQuizScore;
        }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo CourseInfo { get; }

        public global::System.Boolean? Completed { get; }

        public global::System.DateTimeOffset? CompleteTime { get; }

        public global::System.String ProgressId { get; }

        public global::System.Double? MaxQuizScore { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseInfo.Equals(other.CourseInfo)) && Completed == other.Completed && ((CompleteTime is null && other.CompleteTime is null) || CompleteTime != null && CompleteTime.Equals(other.CompleteTime)) && ProgressId.Equals(other.ProgressId) && MaxQuizScore == other.MaxQuizScore;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseInfo.GetHashCode();
                if (Completed != null)
                {
                    hash ^= 397 * Completed.GetHashCode();
                }

                if (CompleteTime != null)
                {
                    hash ^= 397 * CompleteTime.GetHashCode();
                }

                hash ^= 397 * ProgressId.GetHashCode();
                if (MaxQuizScore != null)
                {
                    hash ^= 397 * MaxQuizScore.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job>, IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Job
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job(global::System.String jobId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::System.String? title, global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location location, global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position position)
        {
            JobId = jobId;
            BeginDate = beginDate;
            EndDate = endDate;
            Title = title;
            Location = location;
            Position = position;
        }

        public global::System.String JobId { get; }

        public global::System.DateTime? BeginDate { get; }

        public global::System.DateTime? EndDate { get; }

        public global::System.String? Title { get; }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location Location { get; }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position Position { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (JobId.Equals(other.JobId)) && ((BeginDate is null && other.BeginDate is null) || BeginDate != null && BeginDate.Equals(other.BeginDate)) && ((EndDate is null && other.EndDate is null) || EndDate != null && EndDate.Equals(other.EndDate)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title)) && Location.Equals(other.Location) && Position.Equals(other.Position);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * JobId.GetHashCode();
                if (BeginDate != null)
                {
                    hash ^= 397 * BeginDate.GetHashCode();
                }

                if (EndDate != null)
                {
                    hash ^= 397 * EndDate.GetHashCode();
                }

                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                hash ^= 397 * Location.GetHashCode();
                hash ^= 397 * Position.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo>, IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo(global::System.String? title, global::System.String courseInfoId)
        {
            Title = title;
            CourseInfoId = courseInfoId;
        }

        public global::System.String? Title { get; }

        public global::System.String CourseInfoId { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title))) && CourseInfoId.Equals(other.CourseInfoId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                hash ^= 397 * CourseInfoId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location>, IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position : global::System.IEquatable<GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position>, IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position
    {
        public GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUIDResult
    {
        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People? People { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People
    {
        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_PagedPerson : IGetPersonAndProgressByCSUID_People
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes
    {
        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress?>? Progress { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs?>? Jobs { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Person : IGetPersonAndProgressByCSUID_People_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Progress
    {
        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo CourseInfo { get; }

        public global::System.Boolean? Completed { get; }

        public global::System.DateTimeOffset? CompleteTime { get; }

        public global::System.String ProgressId { get; }

        public global::System.Double? MaxQuizScore { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Progress_Progress : IGetPersonAndProgressByCSUID_People_Nodes_Progress
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs
    {
        public global::System.String JobId { get; }

        public global::System.DateTime? BeginDate { get; }

        public global::System.DateTime? EndDate { get; }

        public global::System.String? Title { get; }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location Location { get; }

        public global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Job : IGetPersonAndProgressByCSUID_People_Nodes_Jobs
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo
    {
        public global::System.String? Title { get; }

        public global::System.String CourseInfoId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo : IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location : IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position : IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdResult : global::System.IEquatable<GetPositionByIdResult>, IGetPositionByIdResult
    {
        public GetPositionByIdResult(global::VectorGraphQL.IGetPositionById_Position? position)
        {
            Position = position;
        }

        public global::VectorGraphQL.IGetPositionById_Position? Position { get; }

        public virtual global::System.Boolean Equals(GetPositionByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Position is null && other.Position is null) || Position != null && Position.Equals(other.Position)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPositionByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Position != null)
                {
                    hash ^= 397 * Position.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionById_Position_Position : global::System.IEquatable<GetPositionById_Position_Position>, IGetPositionById_Position_Position
    {
        public GetPositionById_Position_Position(global::System.String? code, global::System.String? name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String? Code { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetPositionById_Position_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPositionById_Position_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPositionByIdResult
    {
        public global::VectorGraphQL.IGetPositionById_Position? Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPositionById_Position
    {
        public global::System.String? Code { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPositionById_Position_Position : IGetPositionById_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonResult : global::System.IEquatable<UpdatePersonResult>, IUpdatePersonResult
    {
        public UpdatePersonResult(global::VectorGraphQL.IUpdatePerson_Person? person)
        {
            Person = person;
        }

        public global::VectorGraphQL.IUpdatePerson_Person? Person { get; }

        public virtual global::System.Boolean Equals(UpdatePersonResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdatePersonResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePerson_Person_PersonMutation : global::System.IEquatable<UpdatePerson_Person_PersonMutation>, IUpdatePerson_Person_PersonMutation
    {
        public UpdatePerson_Person_PersonMutation(global::VectorGraphQL.IUpdatePerson_Person_Update? update)
        {
            Update = update;
        }

        public global::VectorGraphQL.IUpdatePerson_Person_Update? Update { get; }

        public virtual global::System.Boolean Equals(UpdatePerson_Person_PersonMutation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Update is null && other.Update is null) || Update != null && Update.Equals(other.Update)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdatePerson_Person_PersonMutation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Update != null)
                {
                    hash ^= 397 * Update.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePerson_Person_Update_Person : global::System.IEquatable<UpdatePerson_Person_Update_Person>, IUpdatePerson_Person_Update_Person
    {
        public UpdatePerson_Person_Update_Person(global::System.String personId, global::System.String? username, global::System.String? externalUniqueId, global::System.String? first, global::System.String? last)
        {
            PersonId = personId;
            Username = username;
            ExternalUniqueId = externalUniqueId;
            First = first;
            Last = last;
        }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public virtual global::System.Boolean Equals(UpdatePerson_Person_Update_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PersonId.Equals(other.PersonId)) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((ExternalUniqueId is null && other.ExternalUniqueId is null) || ExternalUniqueId != null && ExternalUniqueId.Equals(other.ExternalUniqueId)) && ((First is null && other.First is null) || First != null && First.Equals(other.First)) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdatePerson_Person_Update_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PersonId.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (ExternalUniqueId != null)
                {
                    hash ^= 397 * ExternalUniqueId.GetHashCode();
                }

                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePersonResult
    {
        public global::VectorGraphQL.IUpdatePerson_Person? Person { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePerson_Person
    {
        public global::VectorGraphQL.IUpdatePerson_Person_Update? Update { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePerson_Person_PersonMutation : IUpdatePerson_Person
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePerson_Person_Update
    {
        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePerson_Person_Update_Person : IUpdatePerson_Person_Update
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdResult : global::System.IEquatable<GetPersonByIdResult>, IGetPersonByIdResult
    {
        public GetPersonByIdResult(global::VectorGraphQL.IGetPersonById_Person? person)
        {
            Person = person;
        }

        public global::VectorGraphQL.IGetPersonById_Person? Person { get; }

        public virtual global::System.Boolean Equals(GetPersonByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Person is null && other.Person is null) || Person != null && Person.Equals(other.Person)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Person != null)
                {
                    hash ^= 397 * Person.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonById_Person_Person : global::System.IEquatable<GetPersonById_Person_Person>, IGetPersonById_Person_Person
    {
        public GetPersonById_Person_Person(global::System.String? address1, global::System.String? address2, global::System.String? email, global::System.String? externalUniqueId, global::System.String? first, global::System.String? last, global::System.String? phone, global::System.String personId, global::System.String? username)
        {
            Address1 = address1;
            Address2 = address2;
            Email = email;
            ExternalUniqueId = externalUniqueId;
            First = first;
            Last = last;
            Phone = phone;
            PersonId = personId;
            Username = username;
        }

        public global::System.String? Address1 { get; }

        public global::System.String? Address2 { get; }

        public global::System.String? Email { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Phone { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public virtual global::System.Boolean Equals(GetPersonById_Person_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Address1 is null && other.Address1 is null) || Address1 != null && Address1.Equals(other.Address1))) && ((Address2 is null && other.Address2 is null) || Address2 != null && Address2.Equals(other.Address2)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((ExternalUniqueId is null && other.ExternalUniqueId is null) || ExternalUniqueId != null && ExternalUniqueId.Equals(other.ExternalUniqueId)) && ((First is null && other.First is null) || First != null && First.Equals(other.First)) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && ((Phone is null && other.Phone is null) || Phone != null && Phone.Equals(other.Phone)) && PersonId.Equals(other.PersonId) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPersonById_Person_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Address1 != null)
                {
                    hash ^= 397 * Address1.GetHashCode();
                }

                if (Address2 != null)
                {
                    hash ^= 397 * Address2.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (ExternalUniqueId != null)
                {
                    hash ^= 397 * ExternalUniqueId.GetHashCode();
                }

                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                if (Phone != null)
                {
                    hash ^= 397 * Phone.GetHashCode();
                }

                hash ^= 397 * PersonId.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonByIdResult
    {
        public global::VectorGraphQL.IGetPersonById_Person? Person { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonById_Person
    {
        public global::System.String? Address1 { get; }

        public global::System.String? Address2 { get; }

        public global::System.String? Email { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Phone { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonById_Person_Person : IGetPersonById_Person
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdResult : global::System.IEquatable<GetCourseByIdResult>, IGetCourseByIdResult
    {
        public GetCourseByIdResult(global::VectorGraphQL.IGetCourseById_CourseInfo? courseInfo)
        {
            CourseInfo = courseInfo;
        }

        public global::VectorGraphQL.IGetCourseById_CourseInfo? CourseInfo { get; }

        public virtual global::System.Boolean Equals(GetCourseByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CourseInfo is null && other.CourseInfo is null) || CourseInfo != null && CourseInfo.Equals(other.CourseInfo)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CourseInfo != null)
                {
                    hash ^= 397 * CourseInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseById_CourseInfo_CourseInfo : global::System.IEquatable<GetCourseById_CourseInfo_CourseInfo>, IGetCourseById_CourseInfo_CourseInfo
    {
        public GetCourseById_CourseInfo_CourseInfo(global::System.String courseInfoId, global::System.String? title)
        {
            CourseInfoId = courseInfoId;
            Title = title;
        }

        public global::System.String CourseInfoId { get; }

        public global::System.String? Title { get; }

        public virtual global::System.Boolean Equals(GetCourseById_CourseInfo_CourseInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CourseInfoId.Equals(other.CourseInfoId)) && ((Title is null && other.Title is null) || Title != null && Title.Equals(other.Title));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseById_CourseInfo_CourseInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CourseInfoId.GetHashCode();
                if (Title != null)
                {
                    hash ^= 397 * Title.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetCourseByIdResult
    {
        public global::VectorGraphQL.IGetCourseById_CourseInfo? CourseInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetCourseById_CourseInfo
    {
        public global::System.String CourseInfoId { get; }

        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetCourseById_CourseInfo_CourseInfo : IGetCourseById_CourseInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsResult : global::System.IEquatable<GetAllPositionsResult>, IGetAllPositionsResult
    {
        public GetAllPositionsResult(global::VectorGraphQL.IGetAllPositions_Positions? positions)
        {
            Positions = positions;
        }

        public global::VectorGraphQL.IGetAllPositions_Positions? Positions { get; }

        public virtual global::System.Boolean Equals(GetAllPositionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Positions is null && other.Positions is null) || Positions != null && Positions.Equals(other.Positions)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPositionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Positions != null)
                {
                    hash ^= 397 * Positions.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositions_Positions_PagedPosition : global::System.IEquatable<GetAllPositions_Positions_PagedPosition>, IGetAllPositions_Positions_PagedPosition
    {
        public GetAllPositions_Positions_PagedPosition(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes?>? nodes, global::VectorGraphQL.IGetAllPositions_Positions_PageInfo? pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetAllPositions_Positions_PageInfo? PageInfo { get; }

        public virtual global::System.Boolean Equals(GetAllPositions_Positions_PagedPosition? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && ((PageInfo is null && other.PageInfo is null) || PageInfo != null && PageInfo.Equals(other.PageInfo));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPositions_Positions_PagedPosition)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                if (PageInfo != null)
                {
                    hash ^= 397 * PageInfo.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositions_Positions_Nodes_Position : global::System.IEquatable<GetAllPositions_Positions_Nodes_Position>, IGetAllPositions_Positions_Nodes_Position
    {
        public GetAllPositions_Positions_Nodes_Position(global::System.String positionId, global::System.String? name, global::System.String? code, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children?>? children)
        {
            PositionId = positionId;
            Name = name;
            Code = code;
            Children = children;
        }

        public global::System.String PositionId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children?>? Children { get; }

        public virtual global::System.Boolean Equals(GetAllPositions_Positions_Nodes_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PositionId.Equals(other.PositionId)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Children, other.Children);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPositions_Positions_Nodes_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PositionId.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Children != null)
                {
                    foreach (var Children_elm in Children)
                    {
                        if (Children_elm != null)
                        {
                            hash ^= 397 * Children_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositions_Positions_PageInfo_PageInfo : global::System.IEquatable<GetAllPositions_Positions_PageInfo_PageInfo>, IGetAllPositions_Positions_PageInfo_PageInfo
    {
        public GetAllPositions_Positions_PageInfo_PageInfo(global::System.Int32? count, global::System.Int32? totalCount, global::System.String? startCursor, global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            Count = count;
            TotalCount = totalCount;
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(GetAllPositions_Positions_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Count == other.Count) && TotalCount == other.TotalCount && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor)) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPositions_Positions_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Count != null)
                {
                    hash ^= 397 * Count.GetHashCode();
                }

                if (TotalCount != null)
                {
                    hash ^= 397 * TotalCount.GetHashCode();
                }

                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositions_Positions_Nodes_Children_Position : global::System.IEquatable<GetAllPositions_Positions_Nodes_Children_Position>, IGetAllPositions_Positions_Nodes_Children_Position
    {
        public GetAllPositions_Positions_Nodes_Children_Position(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetAllPositions_Positions_Nodes_Children_Position? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAllPositions_Positions_Nodes_Children_Position)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositionsResult
    {
        public global::VectorGraphQL.IGetAllPositions_Positions? Positions { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions
    {
        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes?>? Nodes { get; }

        public global::VectorGraphQL.IGetAllPositions_Positions_PageInfo? PageInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_PagedPosition : IGetAllPositions_Positions
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_Nodes
    {
        public global::System.String PositionId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children?>? Children { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_Nodes_Position : IGetAllPositions_Positions_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_PageInfo
    {
        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean HasNextPage { get; }

        public global::System.Boolean HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_PageInfo_PageInfo : IGetAllPositions_Positions_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_Nodes_Children
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositions_Positions_Nodes_Children_Position : IGetAllPositions_Positions_Nodes_Children
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonResult : global::System.IEquatable<AddPersonResult>, IAddPersonResult
    {
        public AddPersonResult(global::VectorGraphQL.IAddPerson_AddPerson? addPerson)
        {
            AddPerson = addPerson;
        }

        public global::VectorGraphQL.IAddPerson_AddPerson? AddPerson { get; }

        public virtual global::System.Boolean Equals(AddPersonResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddPerson is null && other.AddPerson is null) || AddPerson != null && AddPerson.Equals(other.AddPerson)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPersonResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddPerson != null)
                {
                    hash ^= 397 * AddPerson.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPerson_AddPerson_Person : global::System.IEquatable<AddPerson_AddPerson_Person>, IAddPerson_AddPerson_Person
    {
        public AddPerson_AddPerson_Person(global::System.String personId, global::System.String? first, global::System.String? last, global::System.String? username)
        {
            PersonId = personId;
            First = first;
            Last = last;
            Username = username;
        }

        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }

        public virtual global::System.Boolean Equals(AddPerson_AddPerson_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PersonId.Equals(other.PersonId)) && ((First is null && other.First is null) || First != null && First.Equals(other.First)) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddPerson_AddPerson_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PersonId.GetHashCode();
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonResult
    {
        public global::VectorGraphQL.IAddPerson_AddPerson? AddPerson { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPerson_AddPerson
    {
        public global::System.String PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPerson_AddPerson_Person : IAddPerson_AddPerson
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleResult : global::System.IEquatable<GetFirst100PeopleResult>, IGetFirst100PeopleResult
    {
        public GetFirst100PeopleResult(global::VectorGraphQL.IGetFirst100People_People? people)
        {
            People = people;
        }

        public global::VectorGraphQL.IGetFirst100People_People? People { get; }

        public virtual global::System.Boolean Equals(GetFirst100PeopleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((People is null && other.People is null) || People != null && People.Equals(other.People)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100PeopleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (People != null)
                {
                    hash ^= 397 * People.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100People_People_PagedPerson : global::System.IEquatable<GetFirst100People_People_PagedPerson>, IGetFirst100People_People_PagedPerson
    {
        public GetFirst100People_People_PagedPerson(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100People_People_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100People_People_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetFirst100People_People_PagedPerson? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100People_People_PagedPerson)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100People_People_Nodes_Person : global::System.IEquatable<GetFirst100People_People_Nodes_Person>, IGetFirst100People_People_Nodes_Person
    {
        public GetFirst100People_People_Nodes_Person(global::System.String? first, global::System.String? last, global::System.String personId, global::System.String? username, global::System.String? externalUniqueId, global::System.String? email)
        {
            First = first;
            Last = last;
            PersonId = personId;
            Username = username;
            ExternalUniqueId = externalUniqueId;
            Email = email;
        }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? Email { get; }

        public virtual global::System.Boolean Equals(GetFirst100People_People_Nodes_Person? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((First is null && other.First is null) || First != null && First.Equals(other.First))) && ((Last is null && other.Last is null) || Last != null && Last.Equals(other.Last)) && PersonId.Equals(other.PersonId) && ((Username is null && other.Username is null) || Username != null && Username.Equals(other.Username)) && ((ExternalUniqueId is null && other.ExternalUniqueId is null) || ExternalUniqueId != null && ExternalUniqueId.Equals(other.ExternalUniqueId)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFirst100People_People_Nodes_Person)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (First != null)
                {
                    hash ^= 397 * First.GetHashCode();
                }

                if (Last != null)
                {
                    hash ^= 397 * Last.GetHashCode();
                }

                hash ^= 397 * PersonId.GetHashCode();
                if (Username != null)
                {
                    hash ^= 397 * Username.GetHashCode();
                }

                if (ExternalUniqueId != null)
                {
                    hash ^= 397 * ExternalUniqueId.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100PeopleResult
    {
        public global::VectorGraphQL.IGetFirst100People_People? People { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100People_People
    {
        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100People_People_Nodes?>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100People_People_PagedPerson : IGetFirst100People_People
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100People_People_Nodes
    {
        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String PersonId { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.String? Email { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100People_People_Nodes_Person : IGetFirst100People_People_Nodes
    {
    }

    /// <summary>
    /// Represents the operation service of the AddJob GraphQL operation
    /// <code>
    /// mutation AddJob($personId: ID!, $locationId: ID!, $positionId: ID!, $beginDate: Date, $endDate: Date) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     addJob(locationId: $locationId, positionId: $positionId, beginDate: $beginDate, endDate: $endDate) {
    ///       __typename
    ///       jobId
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobMutationDocument : global::StrawberryShake.IDocument
    {
        private AddJobMutationDocument()
        {
        }

        public static AddJobMutationDocument Instance { get; } = new AddJobMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x28, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x24, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x44, 0x61, 0x74, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x4a, 0x6f, 0x62, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e63404c250d60c37225d7bdcd41eff33");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddJob GraphQL operation
    /// <code>
    /// mutation AddJob($personId: ID!, $locationId: ID!, $positionId: ID!, $beginDate: Date, $endDate: Date) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     addJob(locationId: $locationId, positionId: $positionId, beginDate: $beginDate, endDate: $endDate) {
    ///       __typename
    ///       jobId
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobMutation : global::VectorGraphQL.IAddJobMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddJobResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter;
        public AddJobMutation(global::StrawberryShake.IOperationExecutor<IAddJobResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddJobResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddJobResult>> ExecuteAsync(global::System.String personId, global::System.String locationId, global::System.String positionId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(personId, locationId, positionId, beginDate, endDate);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddJobResult>> Watch(global::System.String personId, global::System.String locationId, global::System.String positionId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(personId, locationId, positionId, beginDate, endDate);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String personId, global::System.String locationId, global::System.String positionId, global::System.DateTime? beginDate, global::System.DateTime? endDate)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("personId", FormatPersonId(personId));
            variables.Add("locationId", FormatLocationId(locationId));
            variables.Add("positionId", FormatPositionId(positionId));
            variables.Add("beginDate", FormatBeginDate(beginDate));
            variables.Add("endDate", FormatEndDate(endDate));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddJobMutationDocument.Instance.Hash.Value, name: "AddJob", document: AddJobMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPersonId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatLocationId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatPositionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatBeginDate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEndDate(global::System.DateTime? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _dateFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddJob GraphQL operation
    /// <code>
    /// mutation AddJob($personId: ID!, $locationId: ID!, $positionId: ID!, $beginDate: Date, $endDate: Date) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     addJob(locationId: $locationId, positionId: $positionId, beginDate: $beginDate, endDate: $endDate) {
    ///       __typename
    ///       jobId
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddJobMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddJobResult>> ExecuteAsync(global::System.String personId, global::System.String locationId, global::System.String positionId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddJobResult>> Watch(global::System.String personId, global::System.String locationId, global::System.String positionId, global::System.DateTime? beginDate, global::System.DateTime? endDate, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddPersonBasic GraphQL operation
    /// <code>
    /// mutation AddPersonBasic($email: String, $externalUniqueId: String, $first: String!, $last: String!, $username: String!) {
    ///   addPerson(email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPersonBasicMutationDocument()
        {
        }

        public static AddPersonBasicMutationDocument Instance { get; } = new AddPersonBasicMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x28, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "87e70d1019f95ec3542d24b7e8b2c979");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPersonBasic GraphQL operation
    /// <code>
    /// mutation AddPersonBasic($email: String, $externalUniqueId: String, $first: String!, $last: String!, $username: String!) {
    ///   addPerson(email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicMutation : global::VectorGraphQL.IAddPersonBasicMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPersonBasicResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddPersonBasicMutation(global::StrawberryShake.IOperationExecutor<IAddPersonBasicResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPersonBasicResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonBasicResult>> ExecuteAsync(global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, externalUniqueId, first, last, username);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonBasicResult>> Watch(global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, externalUniqueId, first, last, username);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String username)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("externalUniqueId", FormatExternalUniqueId(externalUniqueId));
            variables.Add("first", FormatFirst(first));
            variables.Add("last", FormatLast(last));
            variables.Add("username", FormatUsername(username));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPersonBasicMutationDocument.Instance.Hash.Value, name: "AddPersonBasic", document: AddPersonBasicMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatExternalUniqueId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFirst(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLast(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatUsername(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPersonBasic GraphQL operation
    /// <code>
    /// mutation AddPersonBasic($email: String, $externalUniqueId: String, $first: String!, $last: String!, $username: String!) {
    ///   addPerson(email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonBasicMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonBasicResult>> ExecuteAsync(global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonBasicResult>> Watch(global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddPersonWithPosition GraphQL operation
    /// <code>
    /// mutation AddPersonWithPosition($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $positionId: ID!, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, positionId: $positionId, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPersonWithPositionMutationDocument()
        {
        }

        public static AddPersonWithPositionMutationDocument Instance { get; } = new AddPersonWithPositionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x2c, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8e62985c8a6b919a116f094b02fdded3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPersonWithPosition GraphQL operation
    /// <code>
    /// mutation AddPersonWithPosition($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $positionId: ID!, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, positionId: $positionId, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionMutation : global::VectorGraphQL.IAddPersonWithPositionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPersonWithPositionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public AddPersonWithPositionMutation(global::StrawberryShake.IOperationExecutor<IAddPersonWithPositionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPersonWithPositionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonWithPositionResult>> ExecuteAsync(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String positionId, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(address1, address2, beginDate, email, externalUniqueId, first, last, phone, positionId, username);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonWithPositionResult>> Watch(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String positionId, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(address1, address2, beginDate, email, externalUniqueId, first, last, phone, positionId, username);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String positionId, global::System.String username)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("address1", FormatAddress1(address1));
            variables.Add("address2", FormatAddress2(address2));
            variables.Add("beginDate", FormatBeginDate(beginDate));
            variables.Add("email", FormatEmail(email));
            variables.Add("externalUniqueId", FormatExternalUniqueId(externalUniqueId));
            variables.Add("first", FormatFirst(first));
            variables.Add("last", FormatLast(last));
            variables.Add("phone", FormatPhone(phone));
            variables.Add("positionId", FormatPositionId(positionId));
            variables.Add("username", FormatUsername(username));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPersonWithPositionMutationDocument.Instance.Hash.Value, name: "AddPersonWithPosition", document: AddPersonWithPositionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAddress1(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAddress2(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBeginDate(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatExternalUniqueId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFirst(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLast(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPhone(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatPositionId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatUsername(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPersonWithPosition GraphQL operation
    /// <code>
    /// mutation AddPersonWithPosition($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $positionId: ID!, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, positionId: $positionId, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonWithPositionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonWithPositionResult>> ExecuteAsync(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String positionId, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonWithPositionResult>> Watch(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String positionId, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeactivatePerson GraphQL operation
    /// <code>
    /// mutation DeactivatePerson($personId: ID!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     deactivate {
    ///       __typename
    ///       personId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonMutationDocument : global::StrawberryShake.IDocument
    {
        private DeactivatePersonMutationDocument()
        {
        }

        public static DeactivatePersonMutationDocument Instance { get; } = new DeactivatePersonMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "da0ac1028898499ebcb0def77197a110");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeactivatePerson GraphQL operation
    /// <code>
    /// mutation DeactivatePerson($personId: ID!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     deactivate {
    ///       __typename
    ///       personId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonMutation : global::VectorGraphQL.IDeactivatePersonMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeactivatePersonResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public DeactivatePersonMutation(global::StrawberryShake.IOperationExecutor<IDeactivatePersonResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeactivatePersonResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeactivatePersonResult>> ExecuteAsync(global::System.String personId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(personId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeactivatePersonResult>> Watch(global::System.String personId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(personId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String personId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("personId", FormatPersonId(personId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeactivatePersonMutationDocument.Instance.Hash.Value, name: "DeactivatePerson", document: DeactivatePersonMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatPersonId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeactivatePerson GraphQL operation
    /// <code>
    /// mutation DeactivatePerson($personId: ID!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     deactivate {
    ///       __typename
    ///       personId
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IDeactivatePersonMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeactivatePersonResult>> ExecuteAsync(global::System.String personId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeactivatePersonResult>> Watch(global::System.String personId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddPosition GraphQL operation
    /// <code>
    /// mutation AddPosition($name: String!, $code: String, $parentId: ID) {
    ///   addPosition(name: $name, code: $code, parentId: $parentId) {
    ///     __typename
    ///     positionId
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPositionMutationDocument()
        {
        }

        public static AddPositionMutationDocument Instance { get; } = new AddPositionMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "419d00219d8788115e724c130a292a90");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPosition GraphQL operation
    /// <code>
    /// mutation AddPosition($name: String!, $code: String, $parentId: ID) {
    ///   addPosition(name: $name, code: $code, parentId: $parentId) {
    ///     __typename
    ///     positionId
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionMutation : global::VectorGraphQL.IAddPositionMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPositionResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public AddPositionMutation(global::StrawberryShake.IOperationExecutor<IAddPositionResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPositionResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPositionResult>> ExecuteAsync(global::System.String name, global::System.String? code, global::System.String? parentId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, code, parentId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPositionResult>> Watch(global::System.String name, global::System.String? code, global::System.String? parentId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, code, parentId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.String? code, global::System.String? parentId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("code", FormatCode(code));
            variables.Add("parentId", FormatParentId(parentId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPositionMutationDocument.Instance.Hash.Value, name: "AddPosition", document: AddPositionMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCode(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatParentId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _iDFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPosition GraphQL operation
    /// <code>
    /// mutation AddPosition($name: String!, $code: String, $parentId: ID) {
    ///   addPosition(name: $name, code: $code, parentId: $parentId) {
    ///     __typename
    ///     positionId
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPositionMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPositionResult>> ExecuteAsync(global::System.String name, global::System.String? code, global::System.String? parentId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPositionResult>> Watch(global::System.String name, global::System.String? code, global::System.String? parentId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100ActivePeopleAndProgress GraphQL operation
    /// <code>
    /// query GetFirst100ActivePeopleAndProgress {
    ///   People(first: 100, active: true) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///     pageinfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFirst100ActivePeopleAndProgressQueryDocument()
        {
        }

        public static GetFirst100ActivePeopleAndProgressQueryDocument Instance { get; } = new GetFirst100ActivePeopleAndProgressQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x30, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x7d, 0x20, 0x6a, 0x6f, 0x62, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "799ba394749c80d8bdd226fbd2689134");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100ActivePeopleAndProgress GraphQL operation
    /// <code>
    /// query GetFirst100ActivePeopleAndProgress {
    ///   People(first: 100, active: true) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///     pageinfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressQuery : global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFirst100ActivePeopleAndProgressResult> _operationExecutor;
        public GetFirst100ActivePeopleAndProgressQuery(global::StrawberryShake.IOperationExecutor<IGetFirst100ActivePeopleAndProgressResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFirst100ActivePeopleAndProgressResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFirst100ActivePeopleAndProgressResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFirst100ActivePeopleAndProgressResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFirst100ActivePeopleAndProgressQueryDocument.Instance.Hash.Value, name: "GetFirst100ActivePeopleAndProgress", document: GetFirst100ActivePeopleAndProgressQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100ActivePeopleAndProgress GraphQL operation
    /// <code>
    /// query GetFirst100ActivePeopleAndProgress {
    ///   People(first: 100, active: true) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///     pageinfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100ActivePeopleAndProgressQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFirst100ActivePeopleAndProgressResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFirst100ActivePeopleAndProgressResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAllLocations GraphQL operation
    /// <code>
    /// query GetAllLocations {
    ///   Locations(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       locationId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllLocationsQueryDocument()
        {
        }

        public static GetAllLocationsQueryDocument Instance { get; } = new GetAllLocationsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c6371f9f396f1f30e43372e319fcb462");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllLocations GraphQL operation
    /// <code>
    /// query GetAllLocations {
    ///   Locations(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       locationId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsQuery : global::VectorGraphQL.IGetAllLocationsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllLocationsResult> _operationExecutor;
        public GetAllLocationsQuery(global::StrawberryShake.IOperationExecutor<IGetAllLocationsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllLocationsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllLocationsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllLocationsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllLocationsQueryDocument.Instance.Hash.Value, name: "GetAllLocations", document: GetAllLocationsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllLocations GraphQL operation
    /// <code>
    /// query GetAllLocations {
    ///   Locations(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       locationId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllLocationsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllLocationsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllLocationsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonAndProgressByCSUID GraphQL operation
    /// <code>
    /// query GetPersonAndProgressByCSUID($externalUniqueId: String) {
    ///   People(externalUniqueId: $externalUniqueId) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonAndProgressByCSUIDQueryDocument()
        {
        }

        public static GetPersonAndProgressByCSUIDQueryDocument Instance { get; } = new GetPersonAndProgressByCSUIDQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x43, 0x53, 0x55, 0x49, 0x44, 0x28, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x20, 0x7d, 0x20, 0x6a, 0x6f, 0x62, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "0bfda0250249799a98538929e42b86bc");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonAndProgressByCSUID GraphQL operation
    /// <code>
    /// query GetPersonAndProgressByCSUID($externalUniqueId: String) {
    ///   People(externalUniqueId: $externalUniqueId) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDQuery : global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonAndProgressByCSUIDResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetPersonAndProgressByCSUIDQuery(global::StrawberryShake.IOperationExecutor<IGetPersonAndProgressByCSUIDResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonAndProgressByCSUIDResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonAndProgressByCSUIDResult>> ExecuteAsync(global::System.String? externalUniqueId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(externalUniqueId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonAndProgressByCSUIDResult>> Watch(global::System.String? externalUniqueId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(externalUniqueId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? externalUniqueId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("externalUniqueId", FormatExternalUniqueId(externalUniqueId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonAndProgressByCSUIDQueryDocument.Instance.Hash.Value, name: "GetPersonAndProgressByCSUID", document: GetPersonAndProgressByCSUIDQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatExternalUniqueId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonAndProgressByCSUID GraphQL operation
    /// <code>
    /// query GetPersonAndProgressByCSUID($externalUniqueId: String) {
    ///   People(externalUniqueId: $externalUniqueId) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       progress {
    ///         __typename
    ///         courseInfo {
    ///           __typename
    ///           title
    ///           courseInfoId
    ///         }
    ///         completed
    ///         completeTime
    ///         progressId
    ///         maxQuizScore
    ///       }
    ///       jobs {
    ///         __typename
    ///         jobId
    ///         beginDate
    ///         endDate
    ///         title
    ///         location {
    ///           __typename
    ///           name
    ///         }
    ///         position {
    ///           __typename
    ///           name
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonAndProgressByCSUIDQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonAndProgressByCSUIDResult>> ExecuteAsync(global::System.String? externalUniqueId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonAndProgressByCSUIDResult>> Watch(global::System.String? externalUniqueId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPositionById GraphQL operation
    /// <code>
    /// query GetPositionById($id: ID!) {
    ///   Position(positionId: $id) {
    ///     __typename
    ///     code
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPositionByIdQueryDocument()
        {
        }

        public static GetPositionByIdQueryDocument Instance { get; } = new GetPositionByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5c9da0d2d67713cea2cebbd0e2008e26");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPositionById GraphQL operation
    /// <code>
    /// query GetPositionById($id: ID!) {
    ///   Position(positionId: $id) {
    ///     __typename
    ///     code
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdQuery : global::VectorGraphQL.IGetPositionByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPositionByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetPositionByIdQuery(global::StrawberryShake.IOperationExecutor<IGetPositionByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPositionByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPositionByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPositionByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPositionByIdQueryDocument.Instance.Hash.Value, name: "GetPositionById", document: GetPositionByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPositionById GraphQL operation
    /// <code>
    /// query GetPositionById($id: ID!) {
    ///   Position(positionId: $id) {
    ///     __typename
    ///     code
    ///     name
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPositionByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPositionByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPositionByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdatePerson GraphQL operation
    /// <code>
    /// mutation UpdatePerson($email: String, $first: String!, $last: String!, $personId: ID!, $username: String!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     update(email: $email, first: $first, last: $last, username: $username) {
    ///       __typename
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       first
    ///       last
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdatePersonMutationDocument()
        {
        }

        public static UpdatePersonMutationDocument Instance { get; } = new UpdatePersonMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x28, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "62614b35e304c9b90a8542cf5b31fb4f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdatePerson GraphQL operation
    /// <code>
    /// mutation UpdatePerson($email: String, $first: String!, $last: String!, $personId: ID!, $username: String!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     update(email: $email, first: $first, last: $last, username: $username) {
    ///       __typename
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       first
    ///       last
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonMutation : global::VectorGraphQL.IUpdatePersonMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdatePersonResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public UpdatePersonMutation(global::StrawberryShake.IOperationExecutor<IUpdatePersonResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdatePersonResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdatePersonResult>> ExecuteAsync(global::System.String? email, global::System.String first, global::System.String last, global::System.String personId, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(email, first, last, personId, username);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdatePersonResult>> Watch(global::System.String? email, global::System.String first, global::System.String last, global::System.String personId, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(email, first, last, personId, username);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? email, global::System.String first, global::System.String last, global::System.String personId, global::System.String username)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("email", FormatEmail(email));
            variables.Add("first", FormatFirst(first));
            variables.Add("last", FormatLast(last));
            variables.Add("personId", FormatPersonId(personId));
            variables.Add("username", FormatUsername(username));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdatePersonMutationDocument.Instance.Hash.Value, name: "UpdatePerson", document: UpdatePersonMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFirst(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLast(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPersonId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatUsername(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdatePerson GraphQL operation
    /// <code>
    /// mutation UpdatePerson($email: String, $first: String!, $last: String!, $personId: ID!, $username: String!) {
    ///   Person(personId: $personId) {
    ///     __typename
    ///     update(email: $email, first: $first, last: $last, username: $username) {
    ///       __typename
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       first
    ///       last
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IUpdatePersonMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdatePersonResult>> ExecuteAsync(global::System.String? email, global::System.String first, global::System.String last, global::System.String personId, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdatePersonResult>> Watch(global::System.String? email, global::System.String first, global::System.String last, global::System.String personId, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPersonById GraphQL operation
    /// <code>
    /// query GetPersonById($id: ID!) {
    ///   Person(personId: $id) {
    ///     __typename
    ///     address1
    ///     address2
    ///     email
    ///     externalUniqueId
    ///     first
    ///     last
    ///     phone
    ///     personId
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPersonByIdQueryDocument()
        {
        }

        public static GetPersonByIdQueryDocument Instance { get; } = new GetPersonByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "f64f673a1b3821344e880cf8a1150974");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonById GraphQL operation
    /// <code>
    /// query GetPersonById($id: ID!) {
    ///   Person(personId: $id) {
    ///     __typename
    ///     address1
    ///     address2
    ///     email
    ///     externalUniqueId
    ///     first
    ///     last
    ///     phone
    ///     personId
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdQuery : global::VectorGraphQL.IGetPersonByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPersonByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetPersonByIdQuery(global::StrawberryShake.IOperationExecutor<IGetPersonByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPersonByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPersonByIdQueryDocument.Instance.Hash.Value, name: "GetPersonById", document: GetPersonByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPersonById GraphQL operation
    /// <code>
    /// query GetPersonById($id: ID!) {
    ///   Person(personId: $id) {
    ///     __typename
    ///     address1
    ///     address2
    ///     email
    ///     externalUniqueId
    ///     first
    ///     last
    ///     phone
    ///     personId
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetPersonByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPersonByIdResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPersonByIdResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($courseInfoId: ID!) {
    ///   CourseInfo(courseInfoId: $courseInfoId) {
    ///     __typename
    ///     courseInfoId
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCourseByIdQueryDocument()
        {
        }

        public static GetCourseByIdQueryDocument Instance { get; } = new GetCourseByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "dbda2e624b80431853bdc3c3fabcf0a0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($courseInfoId: ID!) {
    ///   CourseInfo(courseInfoId: $courseInfoId) {
    ///     __typename
    ///     courseInfoId
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdQuery : global::VectorGraphQL.IGetCourseByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCourseByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetCourseByIdQuery(global::StrawberryShake.IOperationExecutor<IGetCourseByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCourseByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> ExecuteAsync(global::System.String courseInfoId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(courseInfoId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> Watch(global::System.String courseInfoId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseInfoId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String courseInfoId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseInfoId", FormatCourseInfoId(courseInfoId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCourseByIdQueryDocument.Instance.Hash.Value, name: "GetCourseById", document: GetCourseByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseInfoId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseById GraphQL operation
    /// <code>
    /// query GetCourseById($courseInfoId: ID!) {
    ///   CourseInfo(courseInfoId: $courseInfoId) {
    ///     __typename
    ///     courseInfoId
    ///     title
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetCourseByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> ExecuteAsync(global::System.String courseInfoId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseByIdResult>> Watch(global::System.String courseInfoId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetAllPositions GraphQL operation
    /// <code>
    /// query GetAllPositions {
    ///   Positions(first: 200) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       positionId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAllPositionsQueryDocument()
        {
        }

        public static GetAllPositionsQueryDocument Instance { get; } = new GetAllPositionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x32, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1d6fd334f38692c85102804e401e0c27");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPositions GraphQL operation
    /// <code>
    /// query GetAllPositions {
    ///   Positions(first: 200) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       positionId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsQuery : global::VectorGraphQL.IGetAllPositionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAllPositionsResult> _operationExecutor;
        public GetAllPositionsQuery(global::StrawberryShake.IOperationExecutor<IGetAllPositionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAllPositionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPositionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPositionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAllPositionsQueryDocument.Instance.Hash.Value, name: "GetAllPositions", document: GetAllPositionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAllPositions GraphQL operation
    /// <code>
    /// query GetAllPositions {
    ///   Positions(first: 200) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       positionId
    ///       name
    ///       code
    ///       children {
    ///         __typename
    ///         name
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       count
    ///       totalCount
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetAllPositionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAllPositionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAllPositionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the AddPerson GraphQL operation
    /// <code>
    /// mutation AddPerson($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonMutationDocument : global::StrawberryShake.IDocument
    {
        private AddPersonMutationDocument()
        {
        }

        public static AddPersonMutationDocument Instance { get; } = new AddPersonMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x28, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x2c, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x3a, 0x20, 0x24, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x2c, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d10dd11b1126c5062f8d7e246d74989f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPerson GraphQL operation
    /// <code>
    /// mutation AddPerson($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonMutation : global::VectorGraphQL.IAddPersonMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddPersonResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public AddPersonMutation(global::StrawberryShake.IOperationExecutor<IAddPersonResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddPersonResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonResult>> ExecuteAsync(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(address1, address2, beginDate, email, externalUniqueId, first, last, phone, username);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonResult>> Watch(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(address1, address2, beginDate, email, externalUniqueId, first, last, phone, username);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String username)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("address1", FormatAddress1(address1));
            variables.Add("address2", FormatAddress2(address2));
            variables.Add("beginDate", FormatBeginDate(beginDate));
            variables.Add("email", FormatEmail(email));
            variables.Add("externalUniqueId", FormatExternalUniqueId(externalUniqueId));
            variables.Add("first", FormatFirst(first));
            variables.Add("last", FormatLast(last));
            variables.Add("phone", FormatPhone(phone));
            variables.Add("username", FormatUsername(username));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddPersonMutationDocument.Instance.Hash.Value, name: "AddPerson", document: AddPersonMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAddress1(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAddress2(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBeginDate(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatEmail(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatExternalUniqueId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatFirst(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatLast(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPhone(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatUsername(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddPerson GraphQL operation
    /// <code>
    /// mutation AddPerson($address1: String, $address2: String, $beginDate: String, $email: String, $externalUniqueId: String, $first: String!, $last: String!, $phone: String, $username: String!) {
    ///   addPerson(address1: $address1, address2: $address2, beginDate: $beginDate, email: $email, externalUniqueId: $externalUniqueId, first: $first, last: $last, phone: $phone, username: $username) {
    ///     __typename
    ///     personId
    ///     first
    ///     last
    ///     username
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IAddPersonMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddPersonResult>> ExecuteAsync(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String username, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddPersonResult>> Watch(global::System.String? address1, global::System.String? address2, global::System.String? beginDate, global::System.String? email, global::System.String? externalUniqueId, global::System.String first, global::System.String last, global::System.String? phone, global::System.String username, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100People GraphQL operation
    /// <code>
    /// query GetFirst100People {
    ///   People(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       email
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFirst100PeopleQueryDocument()
        {
        }

        public static GetFirst100PeopleQueryDocument Instance { get; } = new GetFirst100PeopleQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x31, 0x30, 0x30, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "246bcc2357a06ff9dd977372dd57152b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100People GraphQL operation
    /// <code>
    /// query GetFirst100People {
    ///   People(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       email
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleQuery : global::VectorGraphQL.IGetFirst100PeopleQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFirst100PeopleResult> _operationExecutor;
        public GetFirst100PeopleQuery(global::StrawberryShake.IOperationExecutor<IGetFirst100PeopleResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFirst100PeopleResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFirst100PeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFirst100PeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFirst100PeopleQueryDocument.Instance.Hash.Value, name: "GetFirst100People", document: GetFirst100PeopleQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFirst100People GraphQL operation
    /// <code>
    /// query GetFirst100People {
    ///   People(first: 100) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       first
    ///       last
    ///       personId
    ///       username
    ///       externalUniqueId
    ///       email
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IGetFirst100PeopleQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFirst100PeopleResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFirst100PeopleResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the VectorClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class VectorClient : global::VectorGraphQL.IVectorClient
    {
        private readonly global::VectorGraphQL.IAddJobMutation _addJob;
        private readonly global::VectorGraphQL.IAddPersonBasicMutation _addPersonBasic;
        private readonly global::VectorGraphQL.IAddPersonWithPositionMutation _addPersonWithPosition;
        private readonly global::VectorGraphQL.IDeactivatePersonMutation _deactivatePerson;
        private readonly global::VectorGraphQL.IAddPositionMutation _addPosition;
        private readonly global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery _getFirst100ActivePeopleAndProgress;
        private readonly global::VectorGraphQL.IGetAllLocationsQuery _getAllLocations;
        private readonly global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery _getPersonAndProgressByCSUID;
        private readonly global::VectorGraphQL.IGetPositionByIdQuery _getPositionById;
        private readonly global::VectorGraphQL.IUpdatePersonMutation _updatePerson;
        private readonly global::VectorGraphQL.IGetPersonByIdQuery _getPersonById;
        private readonly global::VectorGraphQL.IGetCourseByIdQuery _getCourseById;
        private readonly global::VectorGraphQL.IGetAllPositionsQuery _getAllPositions;
        private readonly global::VectorGraphQL.IAddPersonMutation _addPerson;
        private readonly global::VectorGraphQL.IGetFirst100PeopleQuery _getFirst100People;
        public VectorClient(global::VectorGraphQL.IAddJobMutation addJob, global::VectorGraphQL.IAddPersonBasicMutation addPersonBasic, global::VectorGraphQL.IAddPersonWithPositionMutation addPersonWithPosition, global::VectorGraphQL.IDeactivatePersonMutation deactivatePerson, global::VectorGraphQL.IAddPositionMutation addPosition, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery getFirst100ActivePeopleAndProgress, global::VectorGraphQL.IGetAllLocationsQuery getAllLocations, global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery getPersonAndProgressByCSUID, global::VectorGraphQL.IGetPositionByIdQuery getPositionById, global::VectorGraphQL.IUpdatePersonMutation updatePerson, global::VectorGraphQL.IGetPersonByIdQuery getPersonById, global::VectorGraphQL.IGetCourseByIdQuery getCourseById, global::VectorGraphQL.IGetAllPositionsQuery getAllPositions, global::VectorGraphQL.IAddPersonMutation addPerson, global::VectorGraphQL.IGetFirst100PeopleQuery getFirst100People)
        {
            _addJob = addJob ?? throw new global::System.ArgumentNullException(nameof(addJob));
            _addPersonBasic = addPersonBasic ?? throw new global::System.ArgumentNullException(nameof(addPersonBasic));
            _addPersonWithPosition = addPersonWithPosition ?? throw new global::System.ArgumentNullException(nameof(addPersonWithPosition));
            _deactivatePerson = deactivatePerson ?? throw new global::System.ArgumentNullException(nameof(deactivatePerson));
            _addPosition = addPosition ?? throw new global::System.ArgumentNullException(nameof(addPosition));
            _getFirst100ActivePeopleAndProgress = getFirst100ActivePeopleAndProgress ?? throw new global::System.ArgumentNullException(nameof(getFirst100ActivePeopleAndProgress));
            _getAllLocations = getAllLocations ?? throw new global::System.ArgumentNullException(nameof(getAllLocations));
            _getPersonAndProgressByCSUID = getPersonAndProgressByCSUID ?? throw new global::System.ArgumentNullException(nameof(getPersonAndProgressByCSUID));
            _getPositionById = getPositionById ?? throw new global::System.ArgumentNullException(nameof(getPositionById));
            _updatePerson = updatePerson ?? throw new global::System.ArgumentNullException(nameof(updatePerson));
            _getPersonById = getPersonById ?? throw new global::System.ArgumentNullException(nameof(getPersonById));
            _getCourseById = getCourseById ?? throw new global::System.ArgumentNullException(nameof(getCourseById));
            _getAllPositions = getAllPositions ?? throw new global::System.ArgumentNullException(nameof(getAllPositions));
            _addPerson = addPerson ?? throw new global::System.ArgumentNullException(nameof(addPerson));
            _getFirst100People = getFirst100People ?? throw new global::System.ArgumentNullException(nameof(getFirst100People));
        }

        public static global::System.String ClientName => "VectorClient";
        public global::VectorGraphQL.IAddJobMutation AddJob => _addJob;
        public global::VectorGraphQL.IAddPersonBasicMutation AddPersonBasic => _addPersonBasic;
        public global::VectorGraphQL.IAddPersonWithPositionMutation AddPersonWithPosition => _addPersonWithPosition;
        public global::VectorGraphQL.IDeactivatePersonMutation DeactivatePerson => _deactivatePerson;
        public global::VectorGraphQL.IAddPositionMutation AddPosition => _addPosition;
        public global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery GetFirst100ActivePeopleAndProgress => _getFirst100ActivePeopleAndProgress;
        public global::VectorGraphQL.IGetAllLocationsQuery GetAllLocations => _getAllLocations;
        public global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery GetPersonAndProgressByCSUID => _getPersonAndProgressByCSUID;
        public global::VectorGraphQL.IGetPositionByIdQuery GetPositionById => _getPositionById;
        public global::VectorGraphQL.IUpdatePersonMutation UpdatePerson => _updatePerson;
        public global::VectorGraphQL.IGetPersonByIdQuery GetPersonById => _getPersonById;
        public global::VectorGraphQL.IGetCourseByIdQuery GetCourseById => _getCourseById;
        public global::VectorGraphQL.IGetAllPositionsQuery GetAllPositions => _getAllPositions;
        public global::VectorGraphQL.IAddPersonMutation AddPerson => _addPerson;
        public global::VectorGraphQL.IGetFirst100PeopleQuery GetFirst100People => _getFirst100People;
    }

    /// <summary>
    /// Represents the VectorClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial interface IVectorClient
    {
        global::VectorGraphQL.IAddJobMutation AddJob { get; }

        global::VectorGraphQL.IAddPersonBasicMutation AddPersonBasic { get; }

        global::VectorGraphQL.IAddPersonWithPositionMutation AddPersonWithPosition { get; }

        global::VectorGraphQL.IDeactivatePersonMutation DeactivatePerson { get; }

        global::VectorGraphQL.IAddPositionMutation AddPosition { get; }

        global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressQuery GetFirst100ActivePeopleAndProgress { get; }

        global::VectorGraphQL.IGetAllLocationsQuery GetAllLocations { get; }

        global::VectorGraphQL.IGetPersonAndProgressByCSUIDQuery GetPersonAndProgressByCSUID { get; }

        global::VectorGraphQL.IGetPositionByIdQuery GetPositionById { get; }

        global::VectorGraphQL.IUpdatePersonMutation UpdatePerson { get; }

        global::VectorGraphQL.IGetPersonByIdQuery GetPersonById { get; }

        global::VectorGraphQL.IGetCourseByIdQuery GetCourseById { get; }

        global::VectorGraphQL.IGetAllPositionsQuery GetAllPositions { get; }

        global::VectorGraphQL.IAddPersonMutation AddPerson { get; }

        global::VectorGraphQL.IGetFirst100PeopleQuery GetFirst100People { get; }
    }
}

namespace VectorGraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.AddJobResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddJobResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IAddJobResult);
        public AddJobResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddJobResultInfo info)
            {
                return new AddJobResult(MapIAddJob_Person(info.Person, snapshot));
            }

            throw new global::System.ArgumentException("AddJobResultInfo expected.");
        }

        private global::VectorGraphQL.IAddJob_Person? MapIAddJob_Person(global::VectorGraphQL.State.PersonMutationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddJob_Person returnValue = default !;
            if (data?.__typename.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddJob_Person_PersonMutation(MapIAddJob_Person_AddJob(data.AddJob, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IAddJob_Person_AddJob? MapIAddJob_Person_AddJob(global::VectorGraphQL.State.JobData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddJob_Person_AddJob returnValue = default !;
            if (data?.__typename.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddJob_Person_AddJob_Job(data.JobId ?? throw new global::System.ArgumentNullException(), data.Title);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddJobResultInfo(global::VectorGraphQL.State.PersonMutationData? person, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Person = person;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonMutationData? Person { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddJobResultInfo(Person, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.AddPersonBasicResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPersonBasicResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IAddPersonBasicResult);
        public AddPersonBasicResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPersonBasicResultInfo info)
            {
                return new AddPersonBasicResult(MapIAddPersonBasic_AddPerson(info.AddPerson, snapshot));
            }

            throw new global::System.ArgumentException("AddPersonBasicResultInfo expected.");
        }

        private global::VectorGraphQL.IAddPersonBasic_AddPerson? MapIAddPersonBasic_AddPerson(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPersonBasic_AddPerson returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPersonBasic_AddPerson_Person(data.PersonId ?? throw new global::System.ArgumentNullException(), data.First, data.Last, data.Username);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPersonBasicResultInfo(global::VectorGraphQL.State.PersonData? addPerson, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddPerson = addPerson;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonData? AddPerson { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPersonBasicResultInfo(AddPerson, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.AddPersonWithPositionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPersonWithPositionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IAddPersonWithPositionResult);
        public AddPersonWithPositionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPersonWithPositionResultInfo info)
            {
                return new AddPersonWithPositionResult(MapIAddPersonWithPosition_AddPerson(info.AddPerson, snapshot));
            }

            throw new global::System.ArgumentException("AddPersonWithPositionResultInfo expected.");
        }

        private global::VectorGraphQL.IAddPersonWithPosition_AddPerson? MapIAddPersonWithPosition_AddPerson(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPersonWithPosition_AddPerson returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPersonWithPosition_AddPerson_Person(data.PersonId ?? throw new global::System.ArgumentNullException(), data.First, data.Last, data.Username);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPersonWithPositionResultInfo(global::VectorGraphQL.State.PersonData? addPerson, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddPerson = addPerson;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonData? AddPerson { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPersonWithPositionResultInfo(AddPerson, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.DeactivatePersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeactivatePersonResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IDeactivatePersonResult);
        public DeactivatePersonResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeactivatePersonResultInfo info)
            {
                return new DeactivatePersonResult(MapIDeactivatePerson_Person(info.Person, snapshot));
            }

            throw new global::System.ArgumentException("DeactivatePersonResultInfo expected.");
        }

        private global::VectorGraphQL.IDeactivatePerson_Person? MapIDeactivatePerson_Person(global::VectorGraphQL.State.PersonMutationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDeactivatePerson_Person returnValue = default !;
            if (data?.__typename.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DeactivatePerson_Person_PersonMutation(MapIDeactivatePerson_Person_Deactivate(data.Deactivate, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IDeactivatePerson_Person_Deactivate? MapIDeactivatePerson_Person_Deactivate(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IDeactivatePerson_Person_Deactivate returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new DeactivatePerson_Person_Deactivate_Person(data.PersonId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeactivatePersonResultInfo(global::VectorGraphQL.State.PersonMutationData? person, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Person = person;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonMutationData? Person { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeactivatePersonResultInfo(Person, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.AddPositionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPositionResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IAddPositionResult);
        public AddPositionResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPositionResultInfo info)
            {
                return new AddPositionResult(MapIAddPosition_AddPosition(info.AddPosition, snapshot));
            }

            throw new global::System.ArgumentException("AddPositionResultInfo expected.");
        }

        private global::VectorGraphQL.IAddPosition_AddPosition? MapIAddPosition_AddPosition(global::VectorGraphQL.State.PositionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPosition_AddPosition returnValue = default !;
            if (data?.__typename.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPosition_AddPosition_Position(data.PositionId ?? throw new global::System.ArgumentNullException(), data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPositionResultInfo(global::VectorGraphQL.State.PositionData? addPosition, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddPosition = addPosition;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PositionData? AddPosition { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPositionResultInfo(AddPosition, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetFirst100ActivePeopleAndProgressResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFirst100ActivePeopleAndProgressResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult);
        public GetFirst100ActivePeopleAndProgressResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFirst100ActivePeopleAndProgressResultInfo info)
            {
                return new GetFirst100ActivePeopleAndProgressResult(MapIGetFirst100ActivePeopleAndProgress_People(info.People, snapshot));
            }

            throw new global::System.ArgumentException("GetFirst100ActivePeopleAndProgressResultInfo expected.");
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People? MapIGetFirst100ActivePeopleAndProgress_People(global::VectorGraphQL.State.PagedPersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100ActivePeopleAndProgress_People returnValue = default !;
            if (data?.__typename.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_PagedPerson(MapIGetFirst100ActivePeopleAndProgress_People_NodesArray(data.Nodes, snapshot), MapIGetFirst100ActivePeopleAndProgress_People_Pageinfo(data.Pageinfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes?>? MapIGetFirst100ActivePeopleAndProgress_People_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes?>();
            foreach (global::VectorGraphQL.State.PersonData? child in list)
            {
                persons.Add(MapIGetFirst100ActivePeopleAndProgress_People_Nodes(child, snapshot));
            }

            return persons;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes? MapIGetFirst100ActivePeopleAndProgress_People_Nodes(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100ActivePeopleAndProgress_People_Nodes returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Person(data.First, data.Last, data.PersonId ?? throw new global::System.ArgumentNullException(), data.Username, data.ExternalUniqueId, MapIGetFirst100ActivePeopleAndProgress_People_Nodes_ProgressArray(data.Progress, snapshot), MapIGetFirst100ActivePeopleAndProgress_People_Nodes_JobsArray(data.Jobs, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress?>? MapIGetFirst100ActivePeopleAndProgress_People_Nodes_ProgressArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var progresss = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress?>();
            foreach (global::VectorGraphQL.State.ProgressData? child in list)
            {
                progresss.Add(MapIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress(child, snapshot));
            }

            return progresss;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress? MapIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress(global::VectorGraphQL.State.ProgressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress returnValue = default !;
            if (data?.__typename.Equals("Progress", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_Progress(MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo(data.CourseInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.Completed, data.CompleteTime, data.ProgressId ?? throw new global::System.ArgumentNullException(), data.MaxQuizScore);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo(global::VectorGraphQL.State.CourseInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo returnValue = default !;
            if (data.__typename.Equals("CourseInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo_CourseInfo(data.Title, data.CourseInfoId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs?>? MapIGetFirst100ActivePeopleAndProgress_People_Nodes_JobsArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var jobs = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs?>();
            foreach (global::VectorGraphQL.State.JobData? child in list)
            {
                jobs.Add(MapIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs(child, snapshot));
            }

            return jobs;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs? MapIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs(global::VectorGraphQL.State.JobData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs returnValue = default !;
            if (data?.__typename.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Job(data.JobId ?? throw new global::System.ArgumentNullException(), data.BeginDate, data.EndDate, data.Title, MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location(data.Location ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location(global::VectorGraphQL.State.LocationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location returnValue = default !;
            if (data.__typename.Equals("Location", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location_Location(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position MapNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position(global::VectorGraphQL.State.PositionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position returnValue = default !;
            if (data.__typename.Equals("Position", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position_Position(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetFirst100ActivePeopleAndProgress_People_Pageinfo? MapIGetFirst100ActivePeopleAndProgress_People_Pageinfo(global::VectorGraphQL.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100ActivePeopleAndProgress_People_Pageinfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100ActivePeopleAndProgress_People_Pageinfo_PageInfo(data.Count, data.TotalCount, data.StartCursor, data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFirst100ActivePeopleAndProgressResultInfo(global::VectorGraphQL.State.PagedPersonData? people, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            People = people;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PagedPersonData? People { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFirst100ActivePeopleAndProgressResultInfo(People, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetAllLocationsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllLocationsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetAllLocationsResult);
        public GetAllLocationsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllLocationsResultInfo info)
            {
                return new GetAllLocationsResult(MapIGetAllLocations_Locations(info.Locations, snapshot));
            }

            throw new global::System.ArgumentException("GetAllLocationsResultInfo expected.");
        }

        private global::VectorGraphQL.IGetAllLocations_Locations? MapIGetAllLocations_Locations(global::VectorGraphQL.State.PagedLocationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllLocations_Locations returnValue = default !;
            if (data?.__typename.Equals("PagedLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllLocations_Locations_PagedLocation(MapIGetAllLocations_Locations_NodesArray(data.Nodes, snapshot), MapIGetAllLocations_Locations_PageInfo(data.PageInfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes?>? MapIGetAllLocations_Locations_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var locations = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetAllLocations_Locations_Nodes?>();
            foreach (global::VectorGraphQL.State.LocationData? child in list)
            {
                locations.Add(MapIGetAllLocations_Locations_Nodes(child, snapshot));
            }

            return locations;
        }

        private global::VectorGraphQL.IGetAllLocations_Locations_Nodes? MapIGetAllLocations_Locations_Nodes(global::VectorGraphQL.State.LocationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllLocations_Locations_Nodes returnValue = default !;
            if (data?.__typename.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllLocations_Locations_Nodes_Location(data.LocationId ?? throw new global::System.ArgumentNullException(), data.Name, data.Code, MapIGetAllLocations_Locations_Nodes_ChildrenArray(data.Children, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children?>? MapIGetAllLocations_Locations_Nodes_ChildrenArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var locations = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children?>();
            foreach (global::VectorGraphQL.State.LocationData? child in list)
            {
                locations.Add(MapIGetAllLocations_Locations_Nodes_Children(child, snapshot));
            }

            return locations;
        }

        private global::VectorGraphQL.IGetAllLocations_Locations_Nodes_Children? MapIGetAllLocations_Locations_Nodes_Children(global::VectorGraphQL.State.LocationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllLocations_Locations_Nodes_Children returnValue = default !;
            if (data?.__typename.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllLocations_Locations_Nodes_Children_Location(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetAllLocations_Locations_PageInfo? MapIGetAllLocations_Locations_PageInfo(global::VectorGraphQL.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllLocations_Locations_PageInfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllLocations_Locations_PageInfo_PageInfo(data.Count, data.TotalCount, data.StartCursor, data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllLocationsResultInfo(global::VectorGraphQL.State.PagedLocationData? locations, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Locations = locations;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PagedLocationData? Locations { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllLocationsResultInfo(Locations, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetPersonAndProgressByCSUIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPersonAndProgressByCSUIDResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult);
        public GetPersonAndProgressByCSUIDResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPersonAndProgressByCSUIDResultInfo info)
            {
                return new GetPersonAndProgressByCSUIDResult(MapIGetPersonAndProgressByCSUID_People(info.People, snapshot));
            }

            throw new global::System.ArgumentException("GetPersonAndProgressByCSUIDResultInfo expected.");
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People? MapIGetPersonAndProgressByCSUID_People(global::VectorGraphQL.State.PagedPersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonAndProgressByCSUID_People returnValue = default !;
            if (data?.__typename.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonAndProgressByCSUID_People_PagedPerson(MapIGetPersonAndProgressByCSUID_People_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes?>? MapIGetPersonAndProgressByCSUID_People_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes?>();
            foreach (global::VectorGraphQL.State.PersonData? child in list)
            {
                persons.Add(MapIGetPersonAndProgressByCSUID_People_Nodes(child, snapshot));
            }

            return persons;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes? MapIGetPersonAndProgressByCSUID_People_Nodes(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonAndProgressByCSUID_People_Nodes returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Person(data.First, data.Last, data.PersonId ?? throw new global::System.ArgumentNullException(), data.Username, data.ExternalUniqueId, MapIGetPersonAndProgressByCSUID_People_Nodes_ProgressArray(data.Progress, snapshot), MapIGetPersonAndProgressByCSUID_People_Nodes_JobsArray(data.Jobs, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress?>? MapIGetPersonAndProgressByCSUID_People_Nodes_ProgressArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var progresss = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress?>();
            foreach (global::VectorGraphQL.State.ProgressData? child in list)
            {
                progresss.Add(MapIGetPersonAndProgressByCSUID_People_Nodes_Progress(child, snapshot));
            }

            return progresss;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress? MapIGetPersonAndProgressByCSUID_People_Nodes_Progress(global::VectorGraphQL.State.ProgressData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonAndProgressByCSUID_People_Nodes_Progress returnValue = default !;
            if (data?.__typename.Equals("Progress", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Progress_Progress(MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo(data.CourseInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.Completed, data.CompleteTime, data.ProgressId ?? throw new global::System.ArgumentNullException(), data.MaxQuizScore);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo(global::VectorGraphQL.State.CourseInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo returnValue = default !;
            if (data.__typename.Equals("CourseInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo_CourseInfo(data.Title, data.CourseInfoId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs?>? MapIGetPersonAndProgressByCSUID_People_Nodes_JobsArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var jobs = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs?>();
            foreach (global::VectorGraphQL.State.JobData? child in list)
            {
                jobs.Add(MapIGetPersonAndProgressByCSUID_People_Nodes_Jobs(child, snapshot));
            }

            return jobs;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs? MapIGetPersonAndProgressByCSUID_People_Nodes_Jobs(global::VectorGraphQL.State.JobData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonAndProgressByCSUID_People_Nodes_Jobs returnValue = default !;
            if (data?.__typename.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Jobs_Job(data.JobId ?? throw new global::System.ArgumentNullException(), data.BeginDate, data.EndDate, data.Title, MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location(data.Location ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location(global::VectorGraphQL.State.LocationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location returnValue = default !;
            if (data.__typename.Equals("Location", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Jobs_Location_Location(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position MapNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position(global::VectorGraphQL.State.PositionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position returnValue = default !;
            if (data.__typename.Equals("Position", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPersonAndProgressByCSUID_People_Nodes_Jobs_Position_Position(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPersonAndProgressByCSUIDResultInfo(global::VectorGraphQL.State.PagedPersonData? people, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            People = people;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PagedPersonData? People { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonAndProgressByCSUIDResultInfo(People, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetPositionByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPositionByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetPositionByIdResult);
        public GetPositionByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPositionByIdResultInfo info)
            {
                return new GetPositionByIdResult(MapIGetPositionById_Position(info.Position, snapshot));
            }

            throw new global::System.ArgumentException("GetPositionByIdResultInfo expected.");
        }

        private global::VectorGraphQL.IGetPositionById_Position? MapIGetPositionById_Position(global::VectorGraphQL.State.PositionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPositionById_Position returnValue = default !;
            if (data?.__typename.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPositionById_Position_Position(data.Code, data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPositionByIdResultInfo(global::VectorGraphQL.State.PositionData? position, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Position = position;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PositionData? Position { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPositionByIdResultInfo(Position, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.UpdatePersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdatePersonResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IUpdatePersonResult);
        public UpdatePersonResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdatePersonResultInfo info)
            {
                return new UpdatePersonResult(MapIUpdatePerson_Person(info.Person, snapshot));
            }

            throw new global::System.ArgumentException("UpdatePersonResultInfo expected.");
        }

        private global::VectorGraphQL.IUpdatePerson_Person? MapIUpdatePerson_Person(global::VectorGraphQL.State.PersonMutationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdatePerson_Person returnValue = default !;
            if (data?.__typename.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdatePerson_Person_PersonMutation(MapIUpdatePerson_Person_Update(data.Update, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IUpdatePerson_Person_Update? MapIUpdatePerson_Person_Update(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IUpdatePerson_Person_Update returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new UpdatePerson_Person_Update_Person(data.PersonId ?? throw new global::System.ArgumentNullException(), data.Username, data.ExternalUniqueId, data.First, data.Last);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdatePersonResultInfo(global::VectorGraphQL.State.PersonMutationData? person, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Person = person;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonMutationData? Person { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdatePersonResultInfo(Person, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetPersonByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPersonByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetPersonByIdResult);
        public GetPersonByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPersonByIdResultInfo info)
            {
                return new GetPersonByIdResult(MapIGetPersonById_Person(info.Person, snapshot));
            }

            throw new global::System.ArgumentException("GetPersonByIdResultInfo expected.");
        }

        private global::VectorGraphQL.IGetPersonById_Person? MapIGetPersonById_Person(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPersonById_Person returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPersonById_Person_Person(data.Address1, data.Address2, data.Email, data.ExternalUniqueId, data.First, data.Last, data.Phone, data.PersonId ?? throw new global::System.ArgumentNullException(), data.Username);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPersonByIdResultInfo(global::VectorGraphQL.State.PersonData? person, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Person = person;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonData? Person { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPersonByIdResultInfo(Person, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetCourseByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCourseByIdResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetCourseByIdResult);
        public GetCourseByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCourseByIdResultInfo info)
            {
                return new GetCourseByIdResult(MapIGetCourseById_CourseInfo(info.CourseInfo, snapshot));
            }

            throw new global::System.ArgumentException("GetCourseByIdResultInfo expected.");
        }

        private global::VectorGraphQL.IGetCourseById_CourseInfo? MapIGetCourseById_CourseInfo(global::VectorGraphQL.State.CourseInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCourseById_CourseInfo returnValue = default !;
            if (data?.__typename.Equals("CourseInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCourseById_CourseInfo_CourseInfo(data.CourseInfoId ?? throw new global::System.ArgumentNullException(), data.Title);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCourseByIdResultInfo(global::VectorGraphQL.State.CourseInfoData? courseInfo, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseInfo = courseInfo;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.CourseInfoData? CourseInfo { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCourseByIdResultInfo(CourseInfo, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetAllPositionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAllPositionsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetAllPositionsResult);
        public GetAllPositionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAllPositionsResultInfo info)
            {
                return new GetAllPositionsResult(MapIGetAllPositions_Positions(info.Positions, snapshot));
            }

            throw new global::System.ArgumentException("GetAllPositionsResultInfo expected.");
        }

        private global::VectorGraphQL.IGetAllPositions_Positions? MapIGetAllPositions_Positions(global::VectorGraphQL.State.PagedPositionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPositions_Positions returnValue = default !;
            if (data?.__typename.Equals("PagedPosition", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPositions_Positions_PagedPosition(MapIGetAllPositions_Positions_NodesArray(data.Nodes, snapshot), MapIGetAllPositions_Positions_PageInfo(data.PageInfo, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes?>? MapIGetAllPositions_Positions_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var positions = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetAllPositions_Positions_Nodes?>();
            foreach (global::VectorGraphQL.State.PositionData? child in list)
            {
                positions.Add(MapIGetAllPositions_Positions_Nodes(child, snapshot));
            }

            return positions;
        }

        private global::VectorGraphQL.IGetAllPositions_Positions_Nodes? MapIGetAllPositions_Positions_Nodes(global::VectorGraphQL.State.PositionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPositions_Positions_Nodes returnValue = default !;
            if (data?.__typename.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPositions_Positions_Nodes_Position(data.PositionId ?? throw new global::System.ArgumentNullException(), data.Name, data.Code, MapIGetAllPositions_Positions_Nodes_ChildrenArray(data.Children, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children?>? MapIGetAllPositions_Positions_Nodes_ChildrenArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var positions = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children?>();
            foreach (global::VectorGraphQL.State.PositionData? child in list)
            {
                positions.Add(MapIGetAllPositions_Positions_Nodes_Children(child, snapshot));
            }

            return positions;
        }

        private global::VectorGraphQL.IGetAllPositions_Positions_Nodes_Children? MapIGetAllPositions_Positions_Nodes_Children(global::VectorGraphQL.State.PositionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPositions_Positions_Nodes_Children returnValue = default !;
            if (data?.__typename.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPositions_Positions_Nodes_Children_Position(data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::VectorGraphQL.IGetAllPositions_Positions_PageInfo? MapIGetAllPositions_Positions_PageInfo(global::VectorGraphQL.State.PageInfoData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAllPositions_Positions_PageInfo returnValue = default !;
            if (data?.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAllPositions_Positions_PageInfo_PageInfo(data.Count, data.TotalCount, data.StartCursor, data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAllPositionsResultInfo(global::VectorGraphQL.State.PagedPositionData? positions, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Positions = positions;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PagedPositionData? Positions { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAllPositionsResultInfo(Positions, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.AddPersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddPersonResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IAddPersonResult);
        public AddPersonResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddPersonResultInfo info)
            {
                return new AddPersonResult(MapIAddPerson_AddPerson(info.AddPerson, snapshot));
            }

            throw new global::System.ArgumentException("AddPersonResultInfo expected.");
        }

        private global::VectorGraphQL.IAddPerson_AddPerson? MapIAddPerson_AddPerson(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IAddPerson_AddPerson returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new AddPerson_AddPerson_Person(data.PersonId ?? throw new global::System.ArgumentNullException(), data.First, data.Last, data.Username);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddPersonResultInfo(global::VectorGraphQL.State.PersonData? addPerson, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddPerson = addPerson;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PersonData? AddPerson { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddPersonResultInfo(AddPerson, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.GetFirst100PeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFirst100PeopleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::VectorGraphQL.IGetFirst100PeopleResult);
        public GetFirst100PeopleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFirst100PeopleResultInfo info)
            {
                return new GetFirst100PeopleResult(MapIGetFirst100People_People(info.People, snapshot));
            }

            throw new global::System.ArgumentException("GetFirst100PeopleResultInfo expected.");
        }

        private global::VectorGraphQL.IGetFirst100People_People? MapIGetFirst100People_People(global::VectorGraphQL.State.PagedPersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100People_People returnValue = default !;
            if (data?.__typename.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100People_People_PagedPerson(MapIGetFirst100People_People_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.IGetFirst100People_People_Nodes?>? MapIGetFirst100People_People_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.IGetFirst100People_People_Nodes?>();
            foreach (global::VectorGraphQL.State.PersonData? child in list)
            {
                persons.Add(MapIGetFirst100People_People_Nodes(child, snapshot));
            }

            return persons;
        }

        private global::VectorGraphQL.IGetFirst100People_People_Nodes? MapIGetFirst100People_People_Nodes(global::VectorGraphQL.State.PersonData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetFirst100People_People_Nodes returnValue = default !;
            if (data?.__typename.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetFirst100People_People_Nodes_Person(data.First, data.Last, data.PersonId ?? throw new global::System.ArgumentNullException(), data.Username, data.ExternalUniqueId, data.Email);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFirst100PeopleResultInfo(global::VectorGraphQL.State.PagedPersonData? people, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            People = people;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::VectorGraphQL.State.PagedPersonData? People { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFirst100PeopleResultInfo(People, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddJobBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddJobResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddJobResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public AddJobBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddJobResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddJobResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddJobResult Result, AddJobResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddJobResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddJobResult, AddJobResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddJobResultInfo(DeserializeIAddJob_Person(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Person")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonMutationData? DeserializeIAddJob_Person(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonMutationData(typename, addJob: DeserializeIAddJob_Person_AddJob(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addJob")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.JobData? DeserializeIAddJob_Person_AddJob(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.JobData(typename, jobId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")), title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBasicBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonBasicResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonBasicResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public AddPersonBasicBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonBasicResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPersonBasicResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPersonBasicResult Result, AddPersonBasicResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddPersonBasicResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPersonBasicResult, AddPersonBasicResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPersonBasicResultInfo(DeserializeIAddPersonBasic_AddPerson(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addPerson")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIAddPersonBasic_AddPerson(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonWithPositionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonWithPositionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonWithPositionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public AddPersonWithPositionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonWithPositionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPersonWithPositionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPersonWithPositionResult Result, AddPersonWithPositionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddPersonWithPositionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPersonWithPositionResult, AddPersonWithPositionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPersonWithPositionResultInfo(DeserializeIAddPersonWithPosition_AddPerson(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addPerson")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIAddPersonWithPosition_AddPerson(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class DeactivatePersonBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IDeactivatePersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IDeactivatePersonResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public DeactivatePersonBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IDeactivatePersonResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeactivatePersonResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeactivatePersonResult Result, DeactivatePersonResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeactivatePersonResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeactivatePersonResult, DeactivatePersonResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeactivatePersonResultInfo(DeserializeIDeactivatePerson_Person(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Person")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonMutationData? DeserializeIDeactivatePerson_Person(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonMutationData(typename, deactivate: DeserializeIDeactivatePerson_Person_Deactivate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deactivate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIDeactivatePerson_Person_Deactivate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPositionBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPositionResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPositionResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public AddPositionBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPositionResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPositionResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPositionResult Result, AddPositionResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddPositionResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPositionResult, AddPositionResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPositionResultInfo(DeserializeIAddPosition_AddPosition(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addPosition")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PositionData? DeserializeIAddPosition_AddPosition(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, positionId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "positionId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100ActivePeopleAndProgressBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        public GetFirst100ActivePeopleAndProgressBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100ActivePeopleAndProgressResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFirst100ActivePeopleAndProgressResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFirst100ActivePeopleAndProgressResult Result, GetFirst100ActivePeopleAndProgressResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetFirst100ActivePeopleAndProgressResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFirst100ActivePeopleAndProgressResult, GetFirst100ActivePeopleAndProgressResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFirst100ActivePeopleAndProgressResultInfo(DeserializeIGetFirst100ActivePeopleAndProgress_People(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "People")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PagedPersonData? DeserializeIGetFirst100ActivePeopleAndProgress_People(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PagedPersonData(typename, nodes: DeserializeIGetFirst100ActivePeopleAndProgress_People_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageinfo: DeserializeIGetFirst100ActivePeopleAndProgress_People_Pageinfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageinfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? DeserializeIGetFirst100ActivePeopleAndProgress_People_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.State.PersonData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                persons.Add(DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes(child));
            }

            return persons;
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), externalUniqueId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalUniqueId")), progress: DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_ProgressArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "progress")), jobs: DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_JobsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobs")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_ProgressArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var progresss = new global::System.Collections.Generic.List<global::VectorGraphQL.State.ProgressData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                progresss.Add(DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress(child));
            }

            return progresss;
        }

        private global::VectorGraphQL.State.ProgressData? DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Progress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.ProgressData(typename, courseInfo: DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseInfo")), completed: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), completeTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeTime")), progressId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "progressId")), maxQuizScore: DeserializeDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maxQuizScore")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.CourseInfoData DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Progress_CourseInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.CourseInfoData(typename, title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), courseInfoId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseInfoId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double? DeserializeDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_JobsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var jobs = new global::System.Collections.Generic.List<global::VectorGraphQL.State.JobData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                jobs.Add(DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs(child));
            }

            return jobs;
        }

        private global::VectorGraphQL.State.JobData? DeserializeIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.JobData(typename, jobId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")), beginDate: DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beginDate")), endDate: DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), location: DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "location")), position: DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTime? DeserializeDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::VectorGraphQL.State.LocationData DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Location(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.LocationData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PositionData DeserializeNonNullableIGetFirst100ActivePeopleAndProgress_People_Nodes_Jobs_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PageInfoData? DeserializeIGetFirst100ActivePeopleAndProgress_People_Pageinfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PageInfoData(typename, count: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")), totalCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllLocationsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllLocationsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllLocationsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetAllLocationsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllLocationsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllLocationsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllLocationsResult Result, GetAllLocationsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllLocationsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllLocationsResult, GetAllLocationsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllLocationsResultInfo(DeserializeIGetAllLocations_Locations(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Locations")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PagedLocationData? DeserializeIGetAllLocations_Locations(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PagedLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PagedLocationData(typename, nodes: DeserializeIGetAllLocations_Locations_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeIGetAllLocations_Locations_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? DeserializeIGetAllLocations_Locations_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var locations = new global::System.Collections.Generic.List<global::VectorGraphQL.State.LocationData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                locations.Add(DeserializeIGetAllLocations_Locations_Nodes(child));
            }

            return locations;
        }

        private global::VectorGraphQL.State.LocationData? DeserializeIGetAllLocations_Locations_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.LocationData(typename, locationId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "locationId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), code: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), children: DeserializeIGetAllLocations_Locations_Nodes_ChildrenArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "children")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? DeserializeIGetAllLocations_Locations_Nodes_ChildrenArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var locations = new global::System.Collections.Generic.List<global::VectorGraphQL.State.LocationData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                locations.Add(DeserializeIGetAllLocations_Locations_Nodes_Children(child));
            }

            return locations;
        }

        private global::VectorGraphQL.State.LocationData? DeserializeIGetAllLocations_Locations_Nodes_Children(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.LocationData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PageInfoData? DeserializeIGetAllLocations_Locations_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PageInfoData(typename, count: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")), totalCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonAndProgressByCSUIDBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        public GetPersonAndProgressByCSUIDBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonAndProgressByCSUIDResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPersonAndProgressByCSUIDResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPersonAndProgressByCSUIDResult Result, GetPersonAndProgressByCSUIDResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPersonAndProgressByCSUIDResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPersonAndProgressByCSUIDResult, GetPersonAndProgressByCSUIDResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPersonAndProgressByCSUIDResultInfo(DeserializeIGetPersonAndProgressByCSUID_People(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "People")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PagedPersonData? DeserializeIGetPersonAndProgressByCSUID_People(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PagedPersonData(typename, nodes: DeserializeIGetPersonAndProgressByCSUID_People_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? DeserializeIGetPersonAndProgressByCSUID_People_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.State.PersonData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                persons.Add(DeserializeIGetPersonAndProgressByCSUID_People_Nodes(child));
            }

            return persons;
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIGetPersonAndProgressByCSUID_People_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), externalUniqueId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalUniqueId")), progress: DeserializeIGetPersonAndProgressByCSUID_People_Nodes_ProgressArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "progress")), jobs: DeserializeIGetPersonAndProgressByCSUID_People_Nodes_JobsArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobs")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? DeserializeIGetPersonAndProgressByCSUID_People_Nodes_ProgressArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var progresss = new global::System.Collections.Generic.List<global::VectorGraphQL.State.ProgressData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                progresss.Add(DeserializeIGetPersonAndProgressByCSUID_People_Nodes_Progress(child));
            }

            return progresss;
        }

        private global::VectorGraphQL.State.ProgressData? DeserializeIGetPersonAndProgressByCSUID_People_Nodes_Progress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Progress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.ProgressData(typename, courseInfo: DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseInfo")), completed: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completed")), completeTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeTime")), progressId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "progressId")), maxQuizScore: DeserializeDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "maxQuizScore")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.CourseInfoData DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Progress_CourseInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.CourseInfoData(typename, title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), courseInfoId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseInfoId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Double? DeserializeDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? DeserializeIGetPersonAndProgressByCSUID_People_Nodes_JobsArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var jobs = new global::System.Collections.Generic.List<global::VectorGraphQL.State.JobData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                jobs.Add(DeserializeIGetPersonAndProgressByCSUID_People_Nodes_Jobs(child));
            }

            return jobs;
        }

        private global::VectorGraphQL.State.JobData? DeserializeIGetPersonAndProgressByCSUID_People_Nodes_Jobs(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Job", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.JobData(typename, jobId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "jobId")), beginDate: DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beginDate")), endDate: DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")), location: DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "location")), position: DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTime? DeserializeDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::VectorGraphQL.State.LocationData DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Location(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Location", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.LocationData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PositionData DeserializeNonNullableIGetPersonAndProgressByCSUID_People_Nodes_Jobs_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPositionByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPositionByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPositionByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetPositionByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPositionByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPositionByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPositionByIdResult Result, GetPositionByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPositionByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPositionByIdResult, GetPositionByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPositionByIdResultInfo(DeserializeIGetPositionById_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Position")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PositionData? DeserializeIGetPositionById_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, code: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class UpdatePersonBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IUpdatePersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IUpdatePersonResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public UpdatePersonBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IUpdatePersonResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdatePersonResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdatePersonResult Result, UpdatePersonResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdatePersonResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdatePersonResult, UpdatePersonResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdatePersonResultInfo(DeserializeIUpdatePerson_Person(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Person")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonMutationData? DeserializeIUpdatePerson_Person(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PersonMutation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonMutationData(typename, update: DeserializeIUpdatePerson_Person_Update(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "update")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIUpdatePerson_Person_Update(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), externalUniqueId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalUniqueId")), first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetPersonByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetPersonByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetPersonByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetPersonByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPersonByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPersonByIdResult Result, GetPersonByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPersonByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPersonByIdResult, GetPersonByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPersonByIdResultInfo(DeserializeIGetPersonById_Person(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Person")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIGetPersonById_Person(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, address1: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address1")), address2: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address2")), email: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), externalUniqueId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalUniqueId")), first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), phone: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "phone")), personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetCourseByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetCourseByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetCourseByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetCourseByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetCourseByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCourseByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCourseByIdResult Result, GetCourseByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCourseByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCourseByIdResult, GetCourseByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCourseByIdResultInfo(DeserializeIGetCourseById_CourseInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "CourseInfo")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.CourseInfoData? DeserializeIGetCourseById_CourseInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CourseInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.CourseInfoData(typename, courseInfoId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseInfoId")), title: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetAllPositionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetAllPositionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllPositionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetAllPositionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetAllPositionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAllPositionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAllPositionsResult Result, GetAllPositionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAllPositionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAllPositionsResult, GetAllPositionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAllPositionsResultInfo(DeserializeIGetAllPositions_Positions(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "Positions")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PagedPositionData? DeserializeIGetAllPositions_Positions(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PagedPosition", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PagedPositionData(typename, nodes: DeserializeIGetAllPositions_Positions_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")), pageInfo: DeserializeIGetAllPositions_Positions_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? DeserializeIGetAllPositions_Positions_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var positions = new global::System.Collections.Generic.List<global::VectorGraphQL.State.PositionData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                positions.Add(DeserializeIGetAllPositions_Positions_Nodes(child));
            }

            return positions;
        }

        private global::VectorGraphQL.State.PositionData? DeserializeIGetAllPositions_Positions_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, positionId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "positionId")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), code: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), children: DeserializeIGetAllPositions_Positions_Nodes_ChildrenArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "children")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? DeserializeIGetAllPositions_Positions_Nodes_ChildrenArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var positions = new global::System.Collections.Generic.List<global::VectorGraphQL.State.PositionData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                positions.Add(DeserializeIGetAllPositions_Positions_Nodes_Children(child));
            }

            return positions;
        }

        private global::VectorGraphQL.State.PositionData? DeserializeIGetAllPositions_Positions_Nodes_Children(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Position", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PositionData(typename, name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::VectorGraphQL.State.PageInfoData? DeserializeIGetAllPositions_Positions_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PageInfoData(typename, count: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "count")), totalCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class AddPersonBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IAddPersonResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public AddPersonBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IAddPersonResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddPersonResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddPersonResult Result, AddPersonResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddPersonResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddPersonResult, AddPersonResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddPersonResultInfo(DeserializeIAddPerson_AddPerson(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addPerson")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIAddPerson_AddPerson(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class GetFirst100PeopleBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::VectorGraphQL.IGetFirst100PeopleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100PeopleResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public GetFirst100PeopleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::VectorGraphQL.IGetFirst100PeopleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFirst100PeopleResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFirst100PeopleResult Result, GetFirst100PeopleResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetFirst100PeopleResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFirst100PeopleResult, GetFirst100PeopleResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFirst100PeopleResultInfo(DeserializeIGetFirst100People_People(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "People")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::VectorGraphQL.State.PagedPersonData? DeserializeIGetFirst100People_People(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PagedPerson", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PagedPersonData(typename, nodes: DeserializeIGetFirst100People_People_NodesArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? DeserializeIGetFirst100People_People_NodesArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var persons = new global::System.Collections.Generic.List<global::VectorGraphQL.State.PersonData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                persons.Add(DeserializeIGetFirst100People_People_Nodes(child));
            }

            return persons;
        }

        private global::VectorGraphQL.State.PersonData? DeserializeIGetFirst100People_People_Nodes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Person", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::VectorGraphQL.State.PersonData(typename, first: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "first")), last: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "last")), personId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "personId")), username: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "username")), externalUniqueId: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "externalUniqueId")), email: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PersonMutationData
    {
        public PersonMutationData(global::System.String __typename, global::VectorGraphQL.State.JobData? addJob = default !, global::VectorGraphQL.State.PersonData? deactivate = default !, global::VectorGraphQL.State.PersonData? update = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            AddJob = addJob;
            Deactivate = deactivate;
            Update = update;
        }

        public global::System.String __typename { get; }

        public global::VectorGraphQL.State.JobData? AddJob { get; }

        public global::VectorGraphQL.State.PersonData? Deactivate { get; }

        public global::VectorGraphQL.State.PersonData? Update { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class JobData
    {
        public JobData(global::System.String __typename, global::System.String? jobId = default !, global::System.String? title = default !, global::System.DateTime? beginDate = default !, global::System.DateTime? endDate = default !, global::VectorGraphQL.State.LocationData? location = default !, global::VectorGraphQL.State.PositionData? position = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            JobId = jobId;
            Title = title;
            BeginDate = beginDate;
            EndDate = endDate;
            Location = location;
            Position = position;
        }

        public global::System.String __typename { get; }

        public global::System.String? JobId { get; }

        public global::System.String? Title { get; }

        public global::System.DateTime? BeginDate { get; }

        public global::System.DateTime? EndDate { get; }

        public global::VectorGraphQL.State.LocationData? Location { get; }

        public global::VectorGraphQL.State.PositionData? Position { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PersonData
    {
        public PersonData(global::System.String __typename, global::System.String? personId = default !, global::System.String? first = default !, global::System.String? last = default !, global::System.String? username = default !, global::System.String? externalUniqueId = default !, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? progress = default !, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? jobs = default !, global::System.String? address1 = default !, global::System.String? address2 = default !, global::System.String? email = default !, global::System.String? phone = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            PersonId = personId;
            First = first;
            Last = last;
            Username = username;
            ExternalUniqueId = externalUniqueId;
            Progress = progress;
            Jobs = jobs;
            Address1 = address1;
            Address2 = address2;
            Email = email;
            Phone = phone;
        }

        public global::System.String __typename { get; }

        public global::System.String? PersonId { get; }

        public global::System.String? First { get; }

        public global::System.String? Last { get; }

        public global::System.String? Username { get; }

        public global::System.String? ExternalUniqueId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.ProgressData?>? Progress { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.JobData?>? Jobs { get; }

        public global::System.String? Address1 { get; }

        public global::System.String? Address2 { get; }

        public global::System.String? Email { get; }

        public global::System.String? Phone { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PositionData
    {
        public PositionData(global::System.String __typename, global::System.String? positionId = default !, global::System.String? name = default !, global::System.String? code = default !, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? children = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            PositionId = positionId;
            Name = name;
            Code = code;
            Children = children;
        }

        public global::System.String __typename { get; }

        public global::System.String? PositionId { get; }

        public global::System.String? Name { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? Children { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PagedPersonData
    {
        public PagedPersonData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? nodes = default !, global::VectorGraphQL.State.PageInfoData? pageinfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            Pageinfo = pageinfo;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PersonData?>? Nodes { get; }

        public global::VectorGraphQL.State.PageInfoData? Pageinfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.Int32? count = default !, global::System.Int32? totalCount = default !, global::System.String? startCursor = default !, global::System.String? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Count = count;
            TotalCount = totalCount;
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? Count { get; }

        public global::System.Int32? TotalCount { get; }

        public global::System.String? StartCursor { get; }

        public global::System.String? EndCursor { get; }

        public global::System.Boolean? HasNextPage { get; }

        public global::System.Boolean? HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class ProgressData
    {
        public ProgressData(global::System.String __typename, global::VectorGraphQL.State.CourseInfoData? courseInfo = default !, global::System.Boolean? completed = default !, global::System.DateTimeOffset? completeTime = default !, global::System.String? progressId = default !, global::System.Double? maxQuizScore = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CourseInfo = courseInfo;
            Completed = completed;
            CompleteTime = completeTime;
            ProgressId = progressId;
            MaxQuizScore = maxQuizScore;
        }

        public global::System.String __typename { get; }

        public global::VectorGraphQL.State.CourseInfoData? CourseInfo { get; }

        public global::System.Boolean? Completed { get; }

        public global::System.DateTimeOffset? CompleteTime { get; }

        public global::System.String? ProgressId { get; }

        public global::System.Double? MaxQuizScore { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class CourseInfoData
    {
        public CourseInfoData(global::System.String __typename, global::System.String? title = default !, global::System.String? courseInfoId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Title = title;
            CourseInfoId = courseInfoId;
        }

        public global::System.String __typename { get; }

        public global::System.String? Title { get; }

        public global::System.String? CourseInfoId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class LocationData
    {
        public LocationData(global::System.String __typename, global::System.String? name = default !, global::System.String? locationId = default !, global::System.String? code = default !, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? children = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            LocationId = locationId;
            Code = code;
            Children = children;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? LocationId { get; }

        public global::System.String? Code { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? Children { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PagedLocationData
    {
        public PagedLocationData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? nodes = default !, global::VectorGraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.LocationData?>? Nodes { get; }

        public global::VectorGraphQL.State.PageInfoData? PageInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class PagedPositionData
    {
        public PagedPositionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? nodes = default !, global::VectorGraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::VectorGraphQL.State.PositionData?>? Nodes { get; }

        public global::VectorGraphQL.State.PageInfoData? PageInfo { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class VectorClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.13.2.0")]
    public partial class VectorClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public VectorClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
